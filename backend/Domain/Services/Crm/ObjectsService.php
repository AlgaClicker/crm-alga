<?php

namespace Domain\Services\Crm;
use Core\Events\NotificationEvent;
use Domain\Entities\Services\Notification;
use Domain\Services\AbstractService;
use Core\Exceptions\ApplicationException;
use Domain\Contracts\Repository\Crm\ObjectsRepositoryContracts;
use Domain\Contracts\Services\Crm\ObjectsServiceContracts;


use Domain\Contracts\Services\FileServiceContracts;
use Domain\Contracts\Services\AccountServiceContracts;

use Illuminate\Support\Collection;

class ObjectsService extends AbstractService implements ObjectsServiceContracts
{
    private ObjectsRepositoryContracts $objectsRepository;
    protected FileServiceContracts $fileService;
    protected AccountServiceContracts $accountService;

    public function __construct(
        ObjectsRepositoryContracts $objectsRepository,
        FileServiceContracts $fileService,
        AccountServiceContracts $accountService,
    ){
        $this->objectsRepository = $objectsRepository;
        $this->fileService = $fileService;
        $this->accountService = $accountService;

        parent::__construct($this->objectsRepository);
    }

    public function listObjects($arrKeyValue=[]) {

        /*
        $newNotification = new Notification();
        $newNotification->setCreatedAt((new \DateTimeImmutable('now'))->getTimestamp());
        $newNotification->setMessage(json_encode($arrKeyValue));
        $newNotification->setToAccount(auth()->user());
        $newNotification->setFromAccount(auth()->user());
        $newNotification->setTitle("listObjects");
        $newNotification->setMethods(['system','local']);
        event(new NotificationEvent($newNotification));
        */
        $account = $this->accountService->getAccount();
        $role = $this->accountService->getThisRole()->getService();
        $options = array_key_exists('options',$arrKeyValue) ? $arrKeyValue['options'] : [];

        if ($role == "upravlenie" || $role == "administrator") {
            if (array_key_exists('id',$arrKeyValue)) {
                return parent::_getAllBy(['id'=>$arrKeyValue['id']]);
            }
            return parent::_getAllBy([],$options);
        }

        if ($role == "master" || $role == "snabzenie") {
            $listObjects = parent::_getAllBy([],$options);

            $objectAccount = new Collection();
            foreach ($listObjects['data'] as $listObject) {
                if ($listObject->getResponsibles()->contains($this->accountService->getAccount()) || $listObject->getAccounts()->contains($this->accountService->getAccount())) {
                    $objectAccount->add($listObject);
                }
            }
            $arrKeyValue['options'] = $options;
            $arrKeyValue['data'] = $objectAccount->all();
            return  $arrKeyValue;
        }

        $arrKeyValue['options'] = $options;
        $arrKeyValue['data'] = null;
        return $arrKeyValue;

    }


    public function newObject($arrKeyValue) {
        if (!($this->accountService->getThisRole()->getService() == 'administrator' || $this->accountService->getThisRole()->getService() == "upravlenie")) {
            throw new ApplicationException("Отказано в доступе ваши права:".$this->accountService->getThisRole()->getName(),403);
        }
        return parent::_create($arrKeyValue);
        $arrKeyValue = $this->setAttributtes('files',$arrKeyValue);
        $arrKeyValue = $this->setAttributtes('accounts',$arrKeyValue);
        $arrKeyValue = $this->setAttributtes('responsible',$arrKeyValue);
        return $this->objectsRepository->create($arrKeyValue);
    }

    public function _updateById($id, $arrKeyValue)
    {
        $account = $this->accountService->getAccount();
        if (!($account->getRoles()->getService() == 'administrator' || $account->getRoles()->getService() == "upravlenie")) {
            throw new ApplicationException("Отказано в доступе ваши права:".$account->getRoles()->getName(),403);
        }

        $object = $this->getObject($arrKeyValue['id']);

        if (!$object) {
            throw new ApplicationException("Объект с ID:".$arrKeyValue['objectId']." не найден",404);
        }

        return parent::_updateById($id, $arrKeyValue); // TODO: Change the autogenerated stub
    }

    public function deleteobject($objectId) {
        $account = $this->accountService->getAccount();
        if (!($account->getRoles()->getService() == 'administrator' || $account->getRoles()->getService() == "upravlenie")) {
            throw new ApplicationException("Отказано в доступе ваши права:".$account->getRoles()->getName(),403);
        }

        $object = $this->getObject($objectId);

        if (!$object) {
            throw new ApplicationException("Объект с ID: $objectId не найден",404);
        }

        if ($object->getSpecification()->count()>0) {
            throw new ApplicationException("Удаление не возможно. В объекте с ID: $objectId найдены спецификации",400);
        }



            $this->objectsRepository->deleteById($object->getId());

        return $this->listObjects();
    }

    public function getObject($objectId) {
        $account = $this->accountService->getAccount();
        $role = $this->accountService->getThisRole()->getService();

        if ($role == "administrator" && $this->objectsRepository->find($objectId)) {
            return $this->objectsRepository->find($objectId);
        }

        $object = $this->objectsRepository->findMyCompnay($objectId);


        if (!$object) {
            throw new ApplicationException("Объект с ID [$objectId] не найден",404);
        }

        if (($object->getAccounts()->contains($account) || $object->getResponsibles()->contains($account))) {

            return $object;

        }

        if ($role == 'upravlenie' || $object->getAccounts()->contains($account) || $object->getResponsibles()->contains($account)) {
            return $object;

        }

        throw new ApplicationException("Отказано в доступе ваши права:".$this->accountService->getThisRole()->getName(),403);

    }
}
