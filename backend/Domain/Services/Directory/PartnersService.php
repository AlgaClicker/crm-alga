<?php
namespace Domain\Services\Directory;
use Domain\Contracts\Services\AccountServiceContracts;
use Domain\Services\AbstractService;
use Domain\Contracts\Repository\Directory\PartnersRepositoryContract;
use Domain\Contracts\Services\Directory\PartnersServiceContract;
use Illuminate\Support\Collection;
use MoveMoveIo\DaData\Enums\BranchType;
use MoveMoveIo\DaData\Enums\CompanyType;
use MoveMoveIo\DaData\Facades\DaDataCompany;
use Domain\Entities\Business\Directory\Partner;
use Domain\Contracts\Services\Directory\BankServiceContract;
use Domain\Contracts\Repository\Directory\PartnersBankAccountRepositoryContract;
use Domain\Entities\Business\Directory\PartnerBankAccounts;
use Core\Exceptions\ApplicationException;
class PartnersService extends AbstractService implements PartnersServiceContract
{
    private PartnersRepositoryContract $partnersRepository;
    private BankServiceContract $bankService;
    private PartnersBankAccountRepositoryContract $partnersBankAccountRepository;
    public function __construct(
        PartnersRepositoryContract $partnersRepository,
        AccountServiceContracts $accountService,
        BankServiceContract $bankService,
        PartnersBankAccountRepositoryContract $partnersBankAccountRepository
    )
    {
        $this->partnersRepository = $partnersRepository;
        $this->accountService = $accountService;
        $this->bankService = $bankService;
        $this->partnersBankAccountRepository = $partnersBankAccountRepository;
        parent::__construct($partnersRepository);
    }

    public function _getAllBy($arrKeyValue,$options=[]) {
        if ($options && !array_key_exists('orderBy',$options)) {
            $options['orderBy'] = ["isGroup"=>"DESC","name"=>"ASC"];
        } else {
            $options['orderBy']['isGroup'] = "DESC";
        }

        return parent::_getAllBy($arrKeyValue,$options);
    }

    public function _delete($idEntity)
    {
        $partner = $this->_getById($idEntity);
        if (!$partner) {
            throw new ApplicationException("Не найден : ".$arrKeyValue['id'], 404);
        }

       return $this->partnersRepository->delete($partner);
    }

    public function _create($arrKeyValue)
    {
        if ( array_key_exists("isGroup",$arrKeyValue) && $arrKeyValue['isGroup'] == 'true') {
            unset($arrKeyValue['inn']);
            unset($arrKeyValue['address']);
            unset($arrKeyValue['bank_accounts']);
        }


        if (array_key_exists("parent",$arrKeyValue) && $arrKeyValue['parent']) {
            $parent = $this->_getById($arrKeyValue['id']);
            if (!$parent->getIsGroup()) {
                return null;
            }
        }
        $checkInn = $this->_getAllBy(['inn'=>$arrKeyValue['inn']]);
        if ($checkInn) {
            dd($checkInn);
        }
        return parent::_create($arrKeyValue); // TODO: Change the autogenerated stub
    }

    public function newPartnerInn($inn, $parent = null) {
        $checkInn = $this->partnersRepository->findAllByCompnay(['inn'=>$inn]);

        if ($checkInn && count($checkInn['data'])>0) {
            throw new ApplicationException("Партнер с ИНН {$inn} уже имеется!", 400);
        }

        $newPartner = $this->loadPartnerInn($inn);
        if (!$newPartner) {
            return null;
        }
        $newData = json_decode($this->serialize($newPartner),true);

        if ($parent) {
            $newData['parent'] = $parent;
        }

        return  $this->partnersRepository->create($newData);
    }

    public function editPartner($arrKeyValue) {


        $partner = $this->_getById($arrKeyValue['id']);
        if (!$partner) {
            throw new ApplicationException("Не найден : ".$arrKeyValue['id'], 404);
        }


        if ( array_key_exists("isGroup",$arrKeyValue) && $arrKeyValue['isGroup'] == 'true') {
            unset($arrKeyValue['inn']);
            unset($arrKeyValue['address']);
            unset($arrKeyValue['bank_accounts']);
        }

        if ( array_key_exists("isGroup",$arrKeyValue) && $arrKeyValue['isGroup'] == 'false' && $partner->getParent()->count() > 0) {
            throw new ApplicationException("Не может быть материалом, это не пустая группа : ".$arrKeyValue['id'], 404);
        }


        if (array_key_exists('bank_accounts',$arrKeyValue)) {
            if (!$arrKeyValue['bank_accounts']) {
                $bankAccounts = $partner->getBankAccounts();
                foreach ($bankAccounts as $bankAccount) {
                    $this->partnersBankAccountRepository->delete($bankAccount);
                }
            }
            if (is_array($arrKeyValue['bank_accounts'])) {
                $bank_accounts = $arrKeyValue['bank_accounts'];
                unset($arrKeyValue['bank_accounts']);
                foreach ($bank_accounts as $bankAccount) {
                    $idBank = $bankAccount['idBank'];
                    $idAccBank = $bankAccount['idAccBank'];
                    $account = $bankAccount['account'];
                    $bank = $this->bankService->_getById($idBank);
                    $accBank = $this->bankService->getBankAccount($idAccBank);
                    /*
                    if ($bank->getBankAccounts()->contains($accBank)) {
                        $partnerBankAccounts['partner']= $partner;
                        $partnerBankAccounts['bank'] = $accBank;
                        $partnerBankAccounts['account'] = $account;
                        $arrKeyValue['bank_accounts'][] = $partnerBankAccounts;
                        $this->partnersBankAccountRepository->($partnerBankAccounts);
                        $arrKeyValue['bank_accounts'][]['account'] = $account;
                        //dd($this->bankService->getBankAccount($idAccBank));
                    } else {
                        throw new ApplicationException("Не верно указан кор.счет банка");
                    }
                    */
                }
            }
        }
        return  $this->_updateById($partner->getId(),$arrKeyValue);
    }

    public function loadPartnerInn($inn) {
        $dadata = DaDataCompany::id(trim($inn), 1, null, BranchType::MAIN, CompanyType::LEGAL);

        $dadata = array_shift($dadata['suggestions']);
        $partner = new Partner();
        if (!$dadata) {
            return null;
        }
        $partner->setName($dadata['value']);
        $partner->setFullname($dadata['unrestricted_value']);
        $partner->setInn($dadata['data']['inn']);
        $partner->setOgrn($dadata['data']['ogrn']);

        if (array_key_exists('type',$dadata['data'])) {
            $partner->setType($dadata['data']['type']);
        }

        if (array_key_exists('kpp',$dadata['data'])) {
            $partner->setKpp($dadata['data']['kpp']);
        }

        if (array_key_exists('okpo',$dadata['data'])) {
            $partner->setOkpo($dadata['data']['okpo']);
        }
        if (array_key_exists('ogrn',$dadata['data'])) {
            $partner->setOgrn($dadata['data']['ogrn']);
        }
        if (array_key_exists('ogrn_date',$dadata['data'])) {
            $partner->setOgrnDate($dadata['data']['ogrn_date']);
        }
        if (array_key_exists('oktmo',$dadata['data'])) {
            $partner->setOktmo($dadata['data']['oktmo']);
        }



        if (array_key_exists('address',$dadata['data'])) {
            $partner->setAddress($dadata['data']['address']['unrestricted_value']);
        }
        return $partner;
    }

    public function checkPartnerAccount($partnerId,$bik,$account) {
        $bank = $this->bankService->getBankBik($bik);
        return $this->partnersBankAccountRepository->findByMyCompnay(['partner'=>$partnerId,'bank'=>$bank,'account'=>$account]);
    }

    public function addPartnerAccount($partnerId,$bik,$account) {

        if ($this->checkPartnerAccount($partnerId,$bik,$account)) {
            return $this->checkPartnerAccount($partnerId,$bik,$account);
        } else {
            $bank = $this->bankService->getBankBik($bik);
            $newAccount = $this->partnersBankAccountRepository->create(['bank'=>$bank,'account'=>$account,'partner'=>$partnerId]);
            return $newAccount;
            return $this->partnersBankAccountRepository->save($newAccount);
        }
    }

    public function listBankAccount($idPartner) {
        return $this->partnersBankAccountRepository->findByMyCompnay(['partner'=>$idPartner]);
    }

    public function addBankAccount($idPartner,$arrKeyValue) {
    $idBank = $arrKeyValue['idBank'];
    $account = $arrKeyValue['account'];
    $idAccBank = array_key_exists('idAccBank',$arrKeyValue) ? $arrKeyValue['idAccBank'] : null;
    $partner = $this->_getById($idPartner);
    $bank = $this->bankService->_getById($idBank);

        if ($partner && $bank && !$this->checkPartnerAccount($idPartner,$bank->getBik(),$account)) {
            return $this->partnersBankAccountRepository->create(['bank'=>$bank,'account'=>$account,'partner'=>$idPartner]);

        }
        if (!$partner) {
            throw new ApplicationException("Партнер с ID $idPartner не найден ", 404);
        }
        if ($this->checkPartnerAccount($idPartner,$bank->getBik(),$account)) {
            throw new ApplicationException("Счет $account в банке ".$bank->getName()." БИК ".$bank->getBik()." уже присудствует", 400);
        }
    }

    public function deleteBankAccount($idPartner,$idBankAccount) {
        return $this->partnersBankAccountRepository->delete($idBankAccount);
    }
}


