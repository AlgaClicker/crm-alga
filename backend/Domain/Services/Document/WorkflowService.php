<?php
namespace Domain\Services\Document;
use Domain\Services\AbstractService;
use Core\Exceptions\ApplicationException;

use Domain\Contracts\Repository\Document\WorkflowRepositoryContract;
use Domain\Contracts\Repository\Document\TasksRepositoryContract;
use Domain\Contracts\Services\Document\WorkflowServiceContract;

use Domain\Contracts\Services\AccountServiceContracts;
use Domain\Contracts\Services\FileServiceContracts;

use Domain\Contracts\Services\NotificationServiceContracts;
class WorkflowService extends AbstractService implements WorkflowServiceContract
{
    protected WorkflowRepositoryContract $workflowRepository;
    protected TasksRepositoryContract $tasksRepository;
    protected AccountServiceContracts $accountService;
    protected FileServiceContracts $fileService;
    protected NotificationServiceContracts $notificationService;

    public function __construct(
        WorkflowRepositoryContract $workflowRepository,
        TasksRepositoryContract $tasksRepository,
        AccountServiceContracts $accountService,
        FileServiceContracts $fileService,
        NotificationServiceContracts $notificationService
    ) {
        $this->workflowRepository = $workflowRepository;
        $this->tasksRepository = $tasksRepository;
        $this->accountService = $accountService;
        $this->fileService = $fileService;
        $this->notificationService = $notificationService;
        parent::__construct($this->workflowRepository);
    }

    public function _create($arrKeyValue)
    {
        //$dateEnd = new \DateTimeImmutable($request->get('end_at'));
        $arrKeyValue['startDate'] = new \DateTimeImmutable($arrKeyValue['startDate']);
        $arrKeyValue['endDate'] = new \DateTimeImmutable($arrKeyValue['endDate']);
        return parent::_create($arrKeyValue); // TODO: Change the autogenerated stub
    }

    public function newTask($workflowUuid,$arrKeyValue) {
        if (array_key_exists('endDate',$arrKeyValue)){
            $date = new \DateTimeImmutable($arrKeyValue['endDate']);
            $arrKeyValue['endDate'] = $date;
        }

        if (array_key_exists('startDate',$arrKeyValue)){
            $date = new \DateTimeImmutable($arrKeyValue['startDate']);
            $arrKeyValue['startDate'] = $date;
        } else {
            $date = new \DateTimeImmutable('now');
            $arrKeyValue['startDate'] = $date;
        }

        $account = $this->accountService->getAccount();
        if ($account->getRoles() == "administrator") {
            $workflow = $this->workflowRepository->find($workflowUuid);
        } else {
            $workflow = $this->workflowRepository->findBy(['id'=>$workflowUuid,'company'=>$account->getCompany()]);
        }
        if (!$workflow) {
            throw new ApplicationException('Документ с UUID:['.$workflowUuid.'] не найден',404);
        }
        $index = $workflow->getTasks()->count() + 1;
        $arrKeyValue['index'] = $index;
        $arrKeyValue['workflow'] = $workflow;
        if (array_key_exists('responsibles',$arrKeyValue)){
            $responsible = $arrKeyValue['responsibles'];

            unset($arrKeyValue['responsible']);
            foreach ($responsible as $accountId) {
                if ($this->accountService->getAccountMyCompnay($accountId)) {
                    $arrKeyValue['responsible'][] = $this->accountService->getAccountMyCompnay($accountId);
                }

            }

        }

        $newTask = $this->tasksRepository->create($arrKeyValue);
        return $newTask;

    }

    public function listTasks($workflowUuid) {
        if ($this->accountService->getAccount()->getRoles() == "adm") {
            $tasks = $this->tasksRepository->findAllBy(['id'=>$workflowUuid]);
        } else {
            $tasks = $this->tasksRepository->findAllBy(['workflow'=>$workflowUuid]);
        }

        return $tasks;
    }

    public function getWorkflow($workflowUuid) {

    }
    public function  newDoc($arrKeyValue) {
        if (array_key_exists('endDate',$arrKeyValue)){
            $date = new \DateTimeImmutable($arrKeyValue['endDate']);
            $arrKeyValue['endDate'] = $date;
        }

        if (array_key_exists('startDate',$arrKeyValue)){
            $date = new \DateTimeImmutable($arrKeyValue['startDate']);
        } else {
            $date = new \DateTimeImmutable('now');
        }

        $arrKeyValue['startDate'] = $date;

        $arrKeyValue = $this->setAttributtes('responsibles',$arrKeyValue);
        return $this->_create($arrKeyValue);

    }

    public function  listDocs($uuid = null,$show_all=false) {
        $serviceRole = $this->accountService->getThisRole()->getService();
        if ($uuid) {
            return $this->workflowRepository->findByUuid($uuid);
        } else {
            if (($serviceRole =="administrator" || $serviceRole == "upravlenie") && $show_all) {
                return $this->workflowRepository->findAllByCompnay([],['created_at'=>'ASC']);
            }
            return $this->accountService->getAccount()->getWorkflow();
            //return $this->workflowRepository->findAllByMyCompnay(['autor'=>$this->accountService->getAccount()]);
        }




    }


}
