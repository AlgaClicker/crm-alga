<?php

namespace Infrastructure\Repositories\Directory;
use Core\Exceptions\ApplicationException;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Infrastructure\Repositories\AbstractRepository;
use Domain\Contracts\Repository\Directory\MaterialRepositoryContract;

use Domain\Entities\Business\Document\Requisition\Invoice\Material as InvoiceMaterial;
use Domain\Entities\Business\Company;
use Domain\Entities\Business\Directory\Material;

use Domain\Contracts\Repository\Utils\UnitsRepositoryContracts;
use Illuminate\Support\Facades\Auth;
/**
 * MaterialRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */

class MaterialRepository extends AbstractRepository implements MaterialRepositoryContract
{
    private $user;
    private $role;
    private $company;
    private UnitsRepositoryContracts $unitsRepository;

    public function __construct(EntityManager $em, Material $entity, UnitsRepositoryContracts $unitsRepository)
    {
        $this->unitsRepository = $unitsRepository;
        $this->user =  Auth::user();
        $this->role = $this->user->getRoles()->getService();

        $this->company = $this->user->getCompany();
        parent::__construct($em, $entity);
    }


    public function setUp()
    {
        $this->actAs('Searchable', array(
                'fields' => array('name','articul','description'),
                'batchUpdates' => true
            )
        );
    }



    public function findAllParent($parent=null) {
        if ($parent) {
            return parent::findAllByCompnay(['delete'=>false,'parent'=>$parent],['name'=>'ASC']);
        }
        return parent::findAllByCompnay(['delete'=>false],['name'=>'ASC']);
    }


    public function getListMaterials($parent,$options) {
        $pagginate=[];
        $orderBy=[];
        if ($options && array_key_exists('pagginate',$options)) {
            $pagginate = $options['pagginate'];
        }
        if ($options && array_key_exists('orderBy',$options)) {
            $orderBy =  $this->checkAttr($options['orderBy'],'inv');
        }

        if (array_key_exists('page',$pagginate)) {
            $page = $pagginate['page'];
        } else {
            $page = 1;
        }

        if (array_key_exists('limit',$pagginate)) {
            $limit = $pagginate['limit'];
        } else {
            $limit = $this->getDefaultLimit();
        }

        $qb = $this->em->createQueryBuilder();
        $qb->select('thisEntity')->from(Material::class,'thisEntity');
        $qb = $qb->where($qb->expr()->eq('thisEntity.company',":company"));
        if (array_key_exists('filter',$options) && $options['filter']) {
            $qb = $this->qbSetFilterParametr($qb,$options['filter']);
        }

        if ($parent) {
            $qb=$qb->andWhere($qb->expr()->eq('thisEntity.parent',"'$parent'"));
        } else {
            $qb=$qb->andWhere($qb->expr()->isNull('thisEntity.parent'));
        }

        if ($orderBy) {
            foreach ($orderBy as $key=>$val) {
                $qb->addOrderBy('thisEntity.'.$key,$val);
            }
        }
        $query = $this->em->createQuery($qb->getDQL());


        //dd($query->getDQL());
        $companyId = auth()->user()->getCompany();
        $query->setParameter('company', $companyId);
        $paginator = new Paginator($query, $fetchJoinCollection = false);
        //$result = $query->getResult();
        $count = count($paginator);
        $pages = ceil($count/$limit);


        $options = [
            'pagginate'=>[
                'pages'=>$pages,
                'limit'=>$limit,
                'page'=>$page,
                'count'=>$count
            ],
            'orderBy'=>[]
        ];
        $firstResult = ($page-1)*$limit;
        return  [
            'data'=>$query->setFirstResult($firstResult)->setMaxResults($limit)->getResult(),
            'options'=>$options
        ];
    }

    public function  update($idMaterial,$arrKeyValue) {
        $childCount = parent::countAttr(['parent'=>$idMaterial,'company'=>$this->company,'delete'=>false]);

        if (array_key_exists('isGroup',$arrKeyValue)) {

            if ($arrKeyValue['isGroup'] == false && $childCount != 0) {
                throw new ApplicationException('Error change [isGroup]. Found Material child directory couint:'.$childCount,500);
            }

        }

        $material = parent::findOne($idMaterial);
        if (!$material) {
            throw new ApplicationException('Not Found Material',404);
        }

        return parent::update($material,$arrKeyValue);
    }

    public function searchByName($arrKeyValue) {
        return parent::searchBy($arrKeyValue);
    }

    public function delete($material) {
        $childCount = parent::countAttr(['parent'=>$material,'company'=>$this->company,'delete'=>false]);

        if ($childCount != 0) {
            throw new ApplicationException('Fount child materials counut:'.$childCount,500);
        }
        $material = $this->findOne($material);


        if ($material->getRequisitionInvoiceMaterial()->count() || $material->getSpecificationMaterial()->count() || $material->getRequisitionMasterMaterial()->count() ) {
            abort('500','С материалом связаны документы, удаление невозможно');
        }

        if ($this->role == "administrator" || $this->role == "upravlenie") {

            if (!$material) {
                throw new ApplicationException('Not Found Material',404);
            }

            return parent::delete($material->getId());
        }

        return null;
    }
}
