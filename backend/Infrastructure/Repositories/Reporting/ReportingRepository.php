<?php

namespace Infrastructure\Repositories\Reporting;
use DateTimeImmutable;
use Doctrine\ORM\EntityManager;
use Domain\Entities\Business\Directory\Partner;
use Illuminate\Support\Collection;
use Infrastructure\Repositories\AbstractRepository;
use Domain\Entities\Business\Master\Brigade;
use Domain\Entities\Subscriber\Account;
use Domain\Entities\Business\Company\Company;
use Domain\Entities\Business\Payments\Invoice;
use Domain\Entities\Business\Objects\Specification;
use Doctrine\Common\Collections\Criteria;
use Domain\Contracts\Repository\Reporting\ReportingRepositoryContract;
use Infrastructure\Repositories\Services\LogsRepository;
use Domain\Contracts\Repository\Crm\SpecificationRepositoryContracts;
use Doctrine\ORM\Query;
/**
 * CommentsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */

class ReportingRepository implements ReportingRepositoryContract
{

    private Account $account;
    private Company $company;
    private Invoice $invoice;
    private Partner $partner;
    private LogsRepository $logsRepository;
    private SpecificationRepositoryContracts $specificationRepository;
    private EntityManager $em;

    public function __construct(
        EntityManager $em,
        LogsRepository $logsRepository,
        SpecificationRepositoryContracts $specificationRepository
    ){
        $this->em = $em;
        $this->specificationRepository = $specificationRepository;

        $this->account = auth()->user();
        $this->company = $this->account->getCompany();


        $this->logsRepository = $logsRepository;
    }

    public function activeAccounts(array $accounts,$options=[]) {

        $orderBy = array();
        if (array_key_exists('orderBy',$options)) {


            foreach ($options['orderBy'] as $key => $val) {
                if (mb_eregi("_",$key)) {
                    $line01 = substr($key,0,strripos($key,"_"));
                    $line02 = ucfirst(substr($key,strripos($key,"_")+1));
                    $newKey = $line01.$line02;
                    $orderBy[$newKey] = $val;
                } else {
                    $orderBy[$key] = $val;
                }
            }

        }
        //dd($orderBy);

        $data = $this->logsRepository->findBy(['autorId'=>$accounts],$orderBy);
        return [
            "data"=>$data,
            "options"=>$options
        ];
    }

    public function findByUuid($uuid) {

    }

    public function sumSpecificationPeriodOut(DateTimeImmutable $startDate, DateTimeImmutable $endDate,Specification $specification) {
        $qb = $this->em->createQueryBuilder();
        $qb->select(["IDENTITY(inv.specification) as specificationId","sum(inv.amount) as sum, count(inv.id) as records"])->from(get_class(new Invoice()),'inv');
        $qb->where($qb->expr()->in('inv.specification',"?1"));
        $qb->andWhere($qb->expr()->between('inv.date',"?2","?3"));
        $qb->andWhere("inv.type = 'out'");
        $qb->groupBy("inv.specification");


        $query = $this->em->createQuery($qb->getDQL());

        $query->setParameter(1,$this->specificationRepository->getListFixedSpec($specification));
        $query->setParameter(2,$startDate->format('Y-m-d H:i:s'));
        $query->setParameter(3  ,$endDate->format('Y-m-d H:i:s'));
        return $query->getArrayResult();
    }

    public function sumSpecificationPeriodIn(DateTimeImmutable $startDate, DateTimeImmutable $endDate,Specification $specification) {
        $qb = $this->em->createQueryBuilder();
        $qb->select(["IDENTITY(inv.specification) as specificationId","inv.type ","sum(inv.amount) as sum, count(inv.id) as records"])->from(get_class(new Invoice()),'inv');
        $qb->where($qb->expr()->in('inv.specification',"?1"));
        $qb->andWhere($qb->expr()->between('inv.date',"?2","?3"));
        $qb->groupBy("inv.specification, inv.type");


        $query = $this->em->createQuery($qb->getDQL());

        $query->setParameter(1,$this->specificationRepository->getListFixedSpec($specification));
        $query->setParameter(2,$startDate->format('Y-m-d H:i:s'));
        $query->setParameter(3  ,$endDate->format('Y-m-d H:i:s'));
        return $query->getArrayResult();
    }

    public function sumSpecificationPeriodInOut(DateTimeImmutable $startDate, DateTimeImmutable $endDate,Specification $specification) {
        $qb = $this->em->createQueryBuilder();
        $qb->select(["IDENTITY(inv.specification) as specificationId","inv.type as type","sum(inv.amount) as sum, count(inv.id) as records"])->from(get_class(new Invoice()),'inv');
        $qb->where($qb->expr()->in('inv.specification',"?1"));
        $qb->andWhere($qb->expr()->between('inv.date',"?2","?3"));
        $qb->groupBy("inv.specification, inv.type");


        $query = $this->em->createQuery($qb->getDQL());

        $query->setParameter(1,$this->specificationRepository->getListFixedSpec($specification));
        $query->setParameter(2,$startDate->format('Y-m-d H:i:s'));
        $query->setParameter(3  ,$endDate->format('Y-m-d H:i:s'));
        return $query->getArrayResult();
    }

    private  function  clearSpecification(Specification $specification) {
        $specification->getChildren()->clear();
        $specification->getSpecificationTypeworks()->clear();
        $specification->getSpecificationResources()->clear();
        $specification->getSpecificationMaterials()->clear();
        $specification->getResponsibles()->clear();
        return $specification;
    }

    public function reportSpecification(DateTimeImmutable $startDate, DateTimeImmutable $endDate,Specification $specification=null) {

        if (is_array($specification) &&  $specification) {
            return $this->sumSpecificationPeriodIn($startDate,$endDate,$specification)[0];
        }

        $listActualSpec =  $this->specificationRepository->listSpecActual();
        $listResult = new Collection();

        foreach ($listActualSpec as $key=>$spec) {

           $res =  $this->sumSpecificationPeriodInOut($startDate,$endDate,$spec);
           //$resOut = $this->sumSpecificationPeriodOut($startDate,$endDate,$spec);


            foreach ($res as $record) {


                unset($record['specificationId']);
                $record['specification'] =  $this->clearSpecification($spec);
                $listResult->add($record);
           }

/*
           if ($res) {

                $row = $res;

               if (array_key_exists("specificationId",$row)) {
                   $specification = $this->specificationRepository->findMyCompnay($row['specificationId']);
                   $specification = $this->clearSpecification($specification);
                   $row['specification'] = $specification;
                   unset($row['specificationId']);
               }

               if ($row) {
                   $listResult->add($row);
               }

           }
*/

        }

        return $listResult->all();


    }


}
