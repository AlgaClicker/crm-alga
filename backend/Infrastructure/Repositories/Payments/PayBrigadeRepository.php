<?php

namespace Infrastructure\Repositories\Payments;
use DateTimeImmutable;
use Doctrine\ORM\EntityManager;
use Domain\Entities\Business\Directory\Partner;
use Infrastructure\Repositories\AbstractRepository;
use Domain\Entities\Business\Payments\BrigadePay;
use Doctrine\Common\Collections\Criteria;
use Domain\Contracts\Repository\Payments\PayBrigadeRepositoryContract;
use Doctrine\DBAL\Types\Types;


/**
 * CommentsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */

class PayBrigadeRepository extends AbstractRepository implements PayBrigadeRepositoryContract
{


    public function __construct(EntityManager $em, BrigadePay $entity)
    {
        parent::__construct($em, $entity);
    }

    public function searchPayMon($brigade,$date,$type) {
        $dateSt = $date->modify('first day of')->format('Y-m-d 00:00:00');
        $dateThis = $date->modify('last day of')->format('Y-m-d 23:59:59');
        $qb = $this->em->createQueryBuilder();
        $qb->select('pb')
            ->from(get_class($this->entity),'pb')
            ->where(
                $qb->expr()->between('pb.date', ':firstdate', ':enddate'),
                $qb->expr()->eq('pb.brigade',':brigade'),
                $qb->expr()->like('pb.type',':type')
        );
        $query = $this->em->createQuery($qb->getDQL())
            ->setParameter('firstdate', $dateSt)
            ->setparameter('enddate', $dateThis)
            ->setparameter('brigade', $brigade)
            ->setparameter('type', $type);
        return $query->getResult();
    }

    public function newPay($arrAttributes)
    {

        $date =  $arrAttributes['date'];
        $brigade=  $arrAttributes['brigade'];
        $type =  $arrAttributes['type'];
        $listPays = $this->searchPayMon($brigade,$date,$type);
        if (count($listPays)) {
            //return false;
        }

        //return  count($query->getRs());

        return parent::create($arrAttributes); // TODO: Change the autogenerated stub
    }

}
