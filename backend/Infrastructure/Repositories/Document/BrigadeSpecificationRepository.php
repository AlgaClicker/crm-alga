<?php

namespace Infrastructure\Repositories\Document;
use Doctrine\ORM\EntityManager;
use Infrastructure\Repositories\AbstractRepository;
use Domain\Contracts\Repository\AccountsRepositoryContracts;
use Domain\Contracts\Repository\Services\FileRepositoryContracts;
use Infrastructure\Repositories\Crm\BrigadeRepository;
use ReflectionParameter;

use Domain\Entities\Business\Document\BrigadeSpecification;
/**
 * CommentsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BrigadeSpecificationRepository extends AbstractRepository
{
    public function __construct(
        EntityManager $em,
        BrigadeSpecification $entity,
    ){
        parent::__construct($em, $entity);
    }


    public function getSpecificationDateEndWork($specificationId, $brigadeId, \DateTimeImmutable $date_end){
        $startAt = (new \DateTimeImmutable('now'))->modify("midnight +1 min")->format('Y-m-d H:i');
        $endAt = $date_end->modify("tomorrow")->format('Y-m-d H:i');

        $qb = $this->em->createQueryBuilder();
        $qb = $qb->select('bs')->from(get_class($this->entity),'bs');
        $qb = $qb->where($qb->expr()->between('bs.endAt',':startAt',':endAt'));
        $qb = $qb->orWhere($qb->expr()->between('bs.createdAt',':startAt',':endAt'));

        $qb = $qb->andWhere("bs.brigade = :brigade");
        $qb = $qb->andWhere("bs.specification = :specification");

        $query = $this->em->createQuery($qb->getDQL());
        $query->setParameter('startAt', $startAt);
        $query->setParameter('endAt', $endAt);
        $query->setParameter('brigade', $brigadeId);
        $query->setParameter('specification', $specificationId);
        //dd($startAt,$endAt);
        //dd($query->getDQL(),$startAt);
        return $query->getResult();
    }

    public function listSpecificationActual($brigadeId) {
        $qb = $this->em->createQueryBuilder();
        $qb = $qb->select('bs')->from(get_class($this->entity),'bs');
        $qb = $qb->where($qb->expr()->eq('bs.brigade',':brigade'));
        $qb = $qb->andWhere($qb->expr()->lte('bs.createdAt',':startAt'));
        $qb = $qb->andWhere($qb->expr()->gte('bs.endAt',':endAt'));

        $query = $this->em->createQuery($qb->getDQL());
        $query->setParameter('brigade', $brigadeId);
        $query->setParameter('startAt', (new \DateTimeImmutable('now')));
        $query->setParameter('endAt', (new \DateTimeImmutable('now')));
        return $query->getResult();

    }
}



