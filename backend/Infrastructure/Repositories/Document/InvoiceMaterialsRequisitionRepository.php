<?php

namespace Infrastructure\Repositories\Document;
use Doctrine\Migrations\Query\Query;
use Doctrine\ORM\EntityManager;
use Domain\Entities\Business\Master\Requisition;
use Domain\Entities\Business\Master\RequisitionMaterials;
use Domain\Entities\Business\Objects\Objects;
use Illuminate\Support\Facades\Log;
use Infrastructure\Repositories\AbstractRepository;

use Domain\Contracts\Repository\AccountsRepositoryContracts;
use Domain\Contracts\Repository\Services\FileRepositoryContracts;
use ReflectionParameter;


use Domain\Entities\Business\Document\Requisition\Invoice;
use Domain\Entities\Business\Document\Requisition\Invoice\Material;
/**
 * CommentsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InvoiceMaterialsRequisitionRepository extends AbstractRepository
{
    private FileRepositoryContracts $fileRepository;
    public function __construct(
        EntityManager $em,
        Material $entity,
        FileRepositoryContracts $fileRepository
    ){
        $this->fileRepository = $fileRepository;
        parent::__construct($em, $entity);
    }



    public function amountPriceMaterialInvoices(RequisitionMaterials $material_requisition) {
        $qb = $this->em->createQueryBuilder();
        $qb->select('SUM(inv_m.amount) as amount')->from(get_class($this->entity),'inv_m');
        $qb->leftJoin(Invoice::class,'inv','WITH','inv_m.requisitionInvoice = inv.id');
        $material = $material_requisition->getId();
        $qb->andWhere($qb->expr()->in('inv_m.requisitionMaterial','?1'));
        $qb->andWhere($qb->expr()->isNull('inv_m.deleteAt'));
        $qb->andWhere($qb->expr()->eq('inv.fixed','true'));
        //$qb->groupBy('inv_m.id,inv_m.requisitionMaterial');
        $query = $this->em->createQuery($qb->getDQL());

        $query->setParameter(1, $material);
        return $query->getResult() ? $query->getSingleResult()['amount'] : 0;
    }

    public function amountMaterialInvoices(RequisitionMaterials $material_requisition) {
        $qb = $this->em->createQueryBuilder();
        $qb->select('SUM(inv_m.quantity) as amount')->from(get_class($this->entity),'inv_m');

        $qb->leftJoin(Invoice::class,'inv','WITH','inv_m.requisitionInvoice = inv.id');
        $qb->andWhere($qb->expr()->in('inv_m.requisitionMaterial','?1'));
        $qb->andWhere($qb->expr()->eq('inv.fixed','true'));
        //$qb->groupBy("inv_m.id","inv_m.requisitionMaterial");
        $query = $this->em->createQuery($qb->getDQL());


        $material = $material_requisition->getId();
        $query->setParameter(1, $material);

        return $query->getResult() ? $query->getSingleResult()['amount'] : 0;
    }

    public function totalOrderedMaterial(array $requisitions,RequisitionMaterials $material_requisition) {


        $qb = $this->em->createQueryBuilder();

        $qb->select('SUM(inv_m.quantity) as sum')->from(get_class($this->entity),'inv_m');
        $qb->leftJoin(Invoice::class,'inv','WITH','inv_m.requisitionInvoice = inv.id');
        $qb->where($qb->expr()->eq('inv_m.company',"?1"));
        $qb->andWhere($qb->expr()->in('inv_m.requisitionInvoice','?2'));
        $qb->andWhere($qb->expr()->eq('inv.fixed','true'));

            $material = $material_requisition->getId();
            $qb->andWhere($qb->expr()->in('inv_m.requisitionMaterial','?3'));


        $query = $this->em->createQuery($qb->getDQL());
        $account = auth()->user();
        $query->setParameter(1, $account->getCompany()->getId());
        $query->setParameter(2, $requisitions);
        $query->setParameter(3, $material);
        //dd($query->getDQL(),$query->getResult());
        if ($query->getResult()) {
            return $query->getSingleResult()['sum'] ? $query->getSingleResult()['sum'] : 0;
        } else {
            return 0;
        }

    }

    public function listInvoicesMaterialRequestion(RequisitionMaterials $material_requisition)
    {
        return $this->em->getRepository(get_class($this->entity))->findBy(['requisitionMaterial'=>$material_requisition->getId()]);
    }
    public function getMaterialCalculate(RequisitionMaterials $material_requisition): array
    {


        $listData = [];
        $listData['id']=$material_requisition->getId()->serialize();
        $listData['quantity']  =   $material_requisition->getQuantity()?$material_requisition->getQuantity():0;
        $listData['remnant'] = $this->amountMaterialInvoices($material_requisition)?$this->amountMaterialInvoices($material_requisition) : 0;
        $listData['requisition_material'] =   $material_requisition;
        $deliverys = $this->listInvoicesMaterialRequestion($material_requisition);

        foreach ($deliverys as $delivery)
        {

            try {
                $data['id'] = $delivery->getId()->serialize();
                $data['delivery_id']  =   $delivery->getRequisitionInvoice()->getId()->serialize();
                $data['delivery_at'] = $delivery->getRequisitionInvoice()->getDeliveryAt();
                $data['quantity'] = $delivery->getQuantity();
                $data['received'] = $delivery->getReceived() ?? 0;
                $data['description'] = $delivery->getDescription();
                $data['status'] = $delivery->getStatus() ? $delivery->getStatus() : "";
                $data['delivery_status'] = $delivery->getRequisitionInvoice()->getStatus() ? $delivery->getRequisitionInvoice()->getStatus() : "";
                $data['delivery_fixed'] = $delivery->getRequisitionInvoice()->getFixed() ;
                $data['stock'] = $delivery->getRequisitionInvoice()->getStock();
                if ($delivery->getRequisitionInvoice()->getFixed() === true ) {
                    $listData['deliverys'][] = $data;
                }

            } catch (\Exception $e) {
                Log::info($e->getMessage());
            }

        }


        return $listData;
    }


}
