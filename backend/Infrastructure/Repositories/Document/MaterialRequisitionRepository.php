<?php

namespace Infrastructure\Repositories\Document;
use Core\Exceptions\ApplicationException;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Domain\Contracts\Repository\Crm\SpecificationMaterialRepositoryContracts;
use Domain\Contracts\Repository\Crm\SpecificationRepositoryContracts;
use Domain\Contracts\Repository\Directory\MaterialRepositoryContract;
use Domain\Contracts\Repository\Document\MaterialRequisitionRepositoryContracts;
use Infrastructure\Repositories\Document\InvoicesRequisitionRepository;
use Domain\Entities\Business\Document\Requisition\Invoice;

use Domain\Entities\Business\Master\Requisition;
use Domain\Entities\Business\Master\RequisitionMaterials;
use Domain\Entities\Business\Objects\Specification;
use Domain\Entities\Business\Objects\SpecificationMaterial;
use Domain\Entities\Subscriber\Account;
use Infrastructure\Repositories\AbstractRepository;
use JetBrains\PhpStorm\ArrayShape;
use Ramsey\Collection\Collection;
use Ramsey\Uuid\Uuid;
use Domain\Entities\Business\Document\Requisition\Invoice\MaterialReceived;

/**
 * MaterialCalculation
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MaterialRequisitionRepository extends AbstractRepository implements MaterialRequisitionRepositoryContracts
{
    protected SpecificationRepositoryContracts $specificationRepository;
    protected SpecificationMaterialRepositoryContracts $specificationMaterialRepository;
    protected MaterialRequisitionMaterialRepository $requisitionMaterialRepository;
    protected MaterialRepositoryContract $materialRepository;
    protected InvoiceMaterialsConfirmedRequisitionRepository $invoiceMaterialsConfirmedRequisitionRepository;

    public function __construct(
        EntityManager $em,
        Requisition $entity,
        SpecificationMaterialRepositoryContracts $specificationMaterialRepository,
        SpecificationRepositoryContracts $specificationRepository,
        MaterialRequisitionMaterialRepository $requisitionMaterialRepository,
        MaterialRepositoryContract $materialRepository,
        InvoiceMaterialsConfirmedRequisitionRepository $invoiceMaterialsConfirmedRequisitionRepository
    ) {
        $this->specificationMaterialRepository = $specificationMaterialRepository;
        $this->specificationRepository = $specificationRepository;
        $this->requisitionMaterialRepository = $requisitionMaterialRepository;
        $this->materialRepository = $materialRepository;
        $this->invoiceMaterialsConfirmedRequisitionRepository = $invoiceMaterialsConfirmedRequisitionRepository;

        parent::__construct($em, $entity);
    }


    private function getNewRequisitIndex(Specification $spec) {
        $listRequisition = $this->em->getRepository(get_class(new Requisition()))->findOneBy([],['index'=>"DESC"]);

        if ($listRequisition) {
            return $listRequisition->getIndex() + 1;
        } else {
            return 1;
        }
    }


    public function update($entity, $arrAttributes)
    {
        $this->entity  =  $this->findByUuid($entity);
        unset($arrAttributes['autor']) ;
        unset($arrAttributes['number']) ;
        unset($arrAttributes['specification']) ;
        if (array_key_exists('end_at',$arrAttributes)) {
            $this->entity->setEndAt(new \DateTimeImmutable($arrAttributes['end_at']));
            //unset($arrAttributes['end_at']);
        }

        if (array_key_exists('materials',$arrAttributes) && is_array($arrAttributes['materials'])) {

            $materials = $arrAttributes['materials'];
            unset($arrAttributes['materials']);

            if ($materials === []) {
                $arrAttributes['materials']=[];

                foreach ($this->entity->getMaterials() as $materialReq) {
                    $this->requisitionMaterialRepository->deleteHard($materialReq);
                }
                $this->entity->getMaterials()->clear();
            } else {
                foreach ($materials as $material) {

                    if(array_key_exists('specificationMaterial',$material)) {

                        //$this->requisitionMaterialRepository->update($mat_req,['quantity'=>$material['quantity']]);
                        $material_spec = $this->specificationMaterialRepository->findMyCompnay($material['specificationMaterial']['id']);
                        if (array_key_exists('id',$material) && Uuid::isValid($material['id'])) {

                            $mat_req = $this->requisitionMaterialRepository->findOneBy(['id'=>$material['id']]);
                        } else {
                            $mat_req = false;
                        }

                        if ($mat_req) {
                            if ($material_spec != $mat_req->getSpecificationMaterial()) {
                                $mat_req->setSpecificationMaterial($material_spec);
                                $mat_req->setIndex($material_spec->getIndex());
                            }
                            if (array_key_exists('description',$material)) {
                                $mat_req->setDescription($material['description']);
                            }
                            $mat_req->setQuantity($material['quantity']);

                            if (array_key_exists('delete',$material) && $material['delete'] === true) {
                                $this->entity->removeMaterial($mat_req);
                                $this->requisitionMaterialRepository->deleteHard($mat_req);

                            }
                            $this->em->persist($mat_req);
                            //$this->requisitionMaterialRepository->update($mat_req,['quantity'=>$material['quantity']]);

                        } else {


                            if ($material) {
                                $mat = new RequisitionMaterials();
                                $mat->setQuantity($material['quantity']);

                                $mat->setSpecificationMaterial($material_spec);
                                $mat->setIndex($material_spec->getIndex());
                                if (array_key_exists('description',$material)) {
                                    $mat->setDescription($material['description']);
                                }

                                $mat->setRequisition($this->entity);
                                $mat->setCreatedAt(new \DateTimeImmutable('now'));

                                if (!array_key_exists('delete',$material) || $material['delete'] !== true) {
                                    $this->entity->addMaterial($mat);
                                    $this->em->persist($mat);
                                }

                                //$this->requisitionMaterialRepository->save($mat);
                            }
                        }


                    }
                }
            }
        }

        return parent::update($this->entity,$arrAttributes);
    }



    public function createRequisitionOther($arrAttributes) : Requisition {

        $reg = $this->loadNew($arrAttributes);
        //$reg = new Requisition();
        $nubmer = "ot_".$reg->getIndex()."-".(new \DateTimeImmutable('now'))->format('ymd');
        $reg->setNumber($nubmer);
        $reg->setIndex(1);
       // $reg->setMaster($arrAttributes['master']);
        $reg->setEndAt($arrAttributes['end_at']);
        $reg->setStatus('draft');
        //

        if (array_key_exists('specificationId',$arrAttributes)) {
            if ($this->specificationRepository->findMyCompnay($arrAttributes['specificationId'])) {
                $index = $this->getNewRequisitIndex($arrAttributes['specificationId']);
                $nubmer = $index."-".(new \DateTimeImmutable('now'))->format('ymd').'-черновик';
                $reg->setNumber($nubmer);
                $reg->setSpecification($this->specificationRepository->findMyCompnay($arrAttributes['specificationId']));
            }
        }


        foreach ($arrAttributes['materials'] as $material) {

            $regMaterial = new RequisitionMaterials();
            $regMaterial->setCreatedAt(new \DateTimeImmutable('now'));
            $regMaterial->setQuantity($material['quantity']);

            if (array_key_exists('description',$material)) {
                $regMaterial->setDescription($material['description']);
            }

            if (array_key_exists('material',$material) && $material['material']) {
                $material['name'] = $material['material']->getName();
                $regMaterial->setDirectoryMaterial($material['material']);
            } else {
                $regMaterial->setUnit($material['unit']);
                $regMaterial->setName($material['name']);

            }
            $regMaterial->setRequisition($reg);
            $reg->addMaterial($regMaterial);
            $this->em->persist($regMaterial);
        }
        $reg->setCreatedAt(new \DateTimeImmutable('now'));

        parent::save($reg);

        return $reg ;
    }

    public function  newRequisitionMaterialSpecification(Requisition $requisition, SpecificationMaterial $specificationMaterial,$arrayKeyVal) {



        $specMat = $this->specificationRepository->getMaterialSpecification($requisition->getSpecification(),$specificationMaterial);
        $arrayKeyAttrib['requisition'] = $requisition;
        $arrayKeyAttrib['specificationMaterial'] = $specMat;
        $arrayKeyAttrib['unit'] = $specMat->getUnit();
        $arrayKeyAttrib['name'] = $specMat->getFullname();
        $arrayKeyAttrib['quantity'] = $arrayKeyVal['quantity'];

        if ($arrayKeyVal['quantity'] <= 0 ) {
            abort('400','Количество не может быть 0');
        }

        if (array_key_exists('description',$arrayKeyVal) && $arrayKeyVal['description']) {
            $arrayKeyAttrib['description'] = $arrayKeyVal['description'];
        }

        $requisitionMaterial = $this->checkRequisitionMaterialSpecification($requisition,$specMat);

        if ($requisitionMaterial) {
            $arrayKeyAttrib['quantity'] = $requisitionMaterial->getQuantity() + $arrayKeyAttrib['quantity'];
            $new_material = $this->requisitionMaterialRepository->update($arrayKeyAttrib);
        } else {
            $new_material = $this->requisitionMaterialRepository->create($arrayKeyAttrib);
        }



        return $new_material;
    }

    public function checkRequisitionMaterialSpecification(Requisition $requisition, SpecificationMaterial $specificationMaterial): RequisitionMaterials | null {
        $materials_requisition = $requisition->getMaterials();
        $rf = new RequisitionMaterials();

        foreach ($materials_requisition as $material) {
            if ($material->getSpecificationMaterial() === $material)  {
                return $material;
            }
        }
        return null;
    }


    public function newRequisitionMaterials(Specification $spec,\DateTimeImmutable $dateEnd,$arrayKeyVal,$description='') {

        $prefix = $spec->getName();
        $listRequisition = $this->em->getRepository(get_class($this->entity))->findBy(['specification' =>$spec]);
        $index = $this->getNewRequisitIndex($spec);
        $dateEnd =  $dateEnd->modify('tomorrow');
        $nubmer = $index."-".(new \DateTimeImmutable('now'))->format('ymd').'-черновик';
        $newReq = $this->create(['endAt'=>$dateEnd,'fixed'=>false,'specification' =>$spec,'type'=>'spec','index'=>$index,'number'=>$nubmer,'description'=>$description ]);



        foreach ($arrayKeyVal as $line) {
            if (array_key_exists('material_specification_id',$line) && array_key_exists('quantity',$line) && $line['quantity'] > 0) {
                $mat = new RequisitionMaterials();
                $material = $this->specificationMaterialRepository->getMaterialFromSpec($spec,$line['material_specification_id']);
                if ($line['quantity'] ==0 ) {
                    $this->em->flush($newReq);
                    abort('400', "Материал ".$material->getId()." Колличество == 0");
                }
                $mat->setQuantity($line['quantity']);
                $mat->setCreatedAt(new \DateTimeImmutable('now'));
                if (array_key_exists('description',$line) && $line['description']) {
                    $mat->setDescription($line['description']);
                }



                //$material = $this->specificationMaterialRepository->findByMyCompnay(['specification'=>$spec->getId(),'id'=>$line['material_specification_id']]);
                //dd($material);
                if ($material && $spec->getSpecificationMaterials()->contains($material)) {
                    $mat->setSpecificationMaterial($material);

                    if ($material->getMaterial()) {

                        $material = $this->materialRepository->findMyCompnay($material->getMaterial()->getId());

                        $mat->setDirectoryMaterial($material);
                    }

                    $newReq->addMaterial($mat);
                    $mat->setRequisition($newReq);
                    $this->em->persist($mat);
                    $this->em->flush($mat);
                }

            }
        }
        $newReq->setStatus('draft');
        if ($newReq->getMaterials()->count() > 0 ) {
            $this->save($newReq);
        } else {
            $this->em->flush($newReq);
            abort('400',"Материалы спецификации [".$spec->getId()."] \"".$spec->getName()."\" не найдены");
        }

        return $newReq;
    }

    public function requisitionMasterList(array $options=[]) {



        $pagginate=[];
        $orderBy=[];
        if ($options && array_key_exists('pagginate',$options)) {
            $pagginate = $options['pagginate'];
        }
        if ($options && array_key_exists('orderBy',$options)) {
            $orderBy =  $this->checkAttr($options['orderBy'],'inv');
        }

        if (array_key_exists('page',$pagginate)) {
            $page = $pagginate['page'];
        } else {
            $page = 1;
        }

        if (array_key_exists('limit',$pagginate)) {
            $limit = $pagginate['limit'];
        } else {
            $limit = $this->getDefaultLimit();
        }

        $qb = $this->em->createQueryBuilder();

        $qb = $qb->select('thisEntity')->from(get_class(new Requisition()),'thisEntity');
        $qb = $qb->where($qb->expr()->eq('thisEntity.company',":company"));
        $qb = $qb->andWhere($qb->expr()->eq('thisEntity.autor',":autor"));
        $qb = $qb->andWhere($qb->expr()->isNull('thisEntity.deletedAt'));
        if ($options && array_key_exists('filter',$options) && $options['filter']) {
            $qb = $this->qbSetFilterParametr($qb,$options['filter']);
        }

        if ($orderBy) {
            foreach ($orderBy as $key=>$val) {
                $qb->addOrderBy('thisEntity.'.$key,$val);
            }
        }
        $query = $this->em->createQuery($qb->getDQL());

        $companyId = auth()->user()->getCompany();
        $query->setParameter('company', $companyId);
        $query->setParameter('autor', auth()->user());
        $paginator = new Paginator($query, $fetchJoinCollection = false);
        $count = count($paginator);
        $pages = ceil($count/$limit);
        if ($page <= 0) {
            $page=1;
        }
        if ($page > $pages) {
            $page = $pages;
        }


        $options = [
            'pagginate'=>[
                'pages'=>$pages,
                'limit'=>$limit,
                'page'=>$page,
                'count'=>$count
            ],
            'filter'=> $options && array_key_exists('filter',$options) ? $this->checkAttr($options['filter']) : null,
            'orderBy'=>$orderBy
        ];
        $firstResult = ($page-1)*$limit;
        if ($firstResult<0) {
            $firstResult = 1;
        }
        if ($count<=$limit) {
            $limit= $count;
        }

        return  [
            'data'=>$query->setFirstResult($firstResult)->setMaxResults($limit)->getResult(),
            'options'=>$options
        ];

    }

    public function requisitionDelete(Requisition $requisition) {

        if ($requisition->getFixed() === true) {
            throw new ApplicationException("Заявка с ID [".$requisition->getId()."] фиксирована, удаление невозможно!",400);

        }
        return parent::deleteByUuid($requisition->getId());


    }

    private function generateNumber(Object $entity) {

        if (!property_exists($entity,'index')) {
            abort(500,'Для генерации номера необходимо поле index');
        }
        if (!property_exists($entity,'number')) {
            abort(500,'Для генерации номера необходимо поле index');
        }

        if (!property_exists($entity,'company')) {
            abort(500,'Для генерации номера необходимо поле company');
        }

        $qb = $this->em->createQueryBuilder()->setMaxResults(1);
        $qb = $qb->select('en')->from(get_class($entity),'en');
        $company = auth()->user()->getCompany();

        $qb = $qb->where($qb->expr()->eq('en.company',"?1"));
        $qb = $qb->andWhere($qb->expr()->between('en.createdAt','?2','?3'));
        $qb = $qb->orderBy('en.index','DESC');

        $query = $this->em->createQuery($qb->getDQL())->setMaxResults(1);

        $nowDate = new \DateTimeImmutable('now');

        $query->setParameter(1, $company->getId());
        $query->setParameter(2, $nowDate->modify('first day of January this year midnight'));
        $query->setParameter(3, $nowDate->modify('first day of January +1 year midnight'));

        if ($query->getResult()) {
            $result = $query->getSingleResult();
            $newIndex = $result->getIndex() + 1;
        } else {
            $newIndex = 1;
        }
        $newNumber = "Ошибка Генерации номера!";
        if ($entity->getType() == "spec") {
            $newNumber= env('PREFIX_INVOICE_REQ','СП-').$newIndex."/".$nowDate->format('Ym');
        }
        if ($entity->getType() == "other") {
            $newNumber= env('PREFIX_INVOICE_REQ','УН-').$newIndex."/".$nowDate->format('Ym');
        }

        $entity->setIndex($newIndex);
        $entity->setNumber($newNumber);

        return $entity;
    }

    public function requisitionSetFixed($requisitionId) {

        $requisition = $this->findByUuid($requisitionId);
        $spec = $requisition->getSpecification();
        if ($spec) {

        }
        $requisition = $this->generateNumber($requisition);

        $requisition->setFixed(true);
        $requisition->setStatus("new");
        //$requisition->setUpdatedAt(new \DateTimeImmutable('now'));
        return parent::save($requisition);
    }

    public function requisitionSetUnFixed(Requisition $requisition) {

        if (!$requisition->getManager()) {
            $requisition->setFixed(false);
            $requisition->setStatus("draft");
            return parent::save($requisition);
        }

        return $requisition;

    }

    public function getRequisitionOtherId($requisitionId) {
        $requisition = $this->findByUuid($requisitionId);

        if ($requisition->getAutor() === auth()->user()) {
            return $requisition;
        }

        if ($requisition->getManager() === auth()->user()) {
            return $requisition;
        }

        //if ($requisition)


    }

    public function requisitionSetManager(Requisition $requisition, Account $account) {
        if ( $account->getRoles()->getService() == "upravlenie" || $account->getRoles()->getService() !== "snabzenie") {
            throw new ApplicationException("Только роль \"снабжение\" может взять заявку в работу. Ваша роль \"".auth()->user()->getRoles()->getName()."\"");
        }

        $requisition->setManager($account);
        $requisition->setStatus("manage");
        $requisition->setFixed(true);
        return $this->save($requisition);
    }





    public function getListRequisitionMasterMy($options=[]) {

        $options = $this->parseOptions($options);
        $myFilter = [
            "autor"=>auth()->user()->getId()
        ];

        $options['filter'] = array_merge($options['filter'],$myFilter);

        $dqlScript = $this->filterByQuery($options['filter'],$options['orderBy']);

        $query = $this->em->createQuery($dqlScript);

        $count = count($query->getScalarResult());
        $options['pagginate']['count'] = $count;

        return $this->_options($query,$options);

    }

    public function getListRequisitionMy($options=[]) {

        $options = $this->parseOptions($options);

        $myFilter = [
            "manager"=>auth()->user()->getId()
        ];

        $options['filter'] = array_merge($options['filter'],$myFilter);


        $dqlScript = $this->filterByQuery($options['filter'],$options['orderBy']);
        $query = $this->em->createQuery($dqlScript);

        //dd($query->getDql());
        return $this->resultDataOptopns($query,$options);

    }

    private function resultDataOptopns($query,$options=[]) {

        $pagginate=[];
        $orderBy=[];
        if ($options && array_key_exists('pagginate',$options)) {
            $pagginate = $options['pagginate'];

            if (array_key_exists('page',$pagginate)) {

            }
        }
        if ($options && array_key_exists('orderBy',$options)) {
            $qb = $this->em->createQueryBuilder();
        }


        if ($options &&array_key_exists('page',$pagginate)) {
            $page = $pagginate['page'];
        } else {
            $page = 1;
        }

        if ($options && array_key_exists('limit',$pagginate)) {
            $limit = $pagginate['limit'];
        } else {
            $limit = $this->getDefaultLimit();
        }

        $paginator = new Paginator($query, $fetchJoinCollection = true);
        $count = $paginator->count();
        $pages = ceil($count/$limit);
        if ($limit>=$count) {
            $page = 1;
        }
        if ($page> $pages) {
            $page = $pages;
        }

        $firstResult = ($page-1)*$limit;



        $query->setFirstResult($firstResult)->setMaxResults($limit);





        $options = [
            'pagginate'=>[
                'pages'=>$pages,
                'limit'=>$limit,
                'page'=>$page,
                'count'=>$count
            ],
            'filter'=>$options['filter'],
            'orderBy'=>$orderBy
        ];


        return  [
            'data'=>$query->getResult(),
            'options'=>$options
        ];
    }

    private function _options($query,$options=[]) {

        $pagginate=[];
        $orderBy=[];
        if ($options && array_key_exists('pagginate',$options)) {
            $pagginate = $options['pagginate'];
        }


        if ($options && array_key_exists('orderBy',$options)) {
            $orderBy = $this->checkAttr($options['orderBy']);
        }

        if ($options &&array_key_exists('page',$pagginate)) {
            $page = $pagginate['page'];
        } else {
            $page = 1;
        }

        if ($options && array_key_exists('limit',$pagginate)) {
            $limit = $pagginate['limit'];
        } else {
            $limit = $this->getDefaultLimit();
        }
        $companyId = auth()->user()->getCompany();
        $query->setParameter('company', $companyId);
        $query->setParameter('responsible', auth()->user());

        $paginator = new Paginator($query, $fetchJoinCollection = false);
        $count = count($paginator);
        $pages = ceil($count/$limit);
        if ($page> $pages) {
            $page = $pages;
        }
        $options = [
            'pagginate'=>[
                'pages'=>$pages,
                'limit'=>$limit,
                'page'=>$page,
                'count'=>$count
            ],
            'orderBy'=>$orderBy
        ];
        $firstResult = ($page-1)*$limit;
        return  [
            'data'=>$query->setFirstResult($firstResult)->setMaxResults($limit)->getResult(),
            'options'=>$options
        ];
    }

    public function getListRequisition($options=[]) {
        $options = $this->parseOptions($options);
        $qb = $this->em->createQueryBuilder();
        $qb = $qb->select('thisEntity')->from(Requisition::class,'thisEntity');
        $qb = $qb->leftJoin(Specification::class,'spec');
        $qb = $qb->leftJoin('spec.responsibles', 'resp');
        $qb = $qb->where($qb->expr()->eq('thisEntity.company',"?1"));
        $qb = $qb->andWhere('thisEntity.fixed = true');
        $qb = $qb->andWhere($qb->expr()->isNull('thisEntity.deletedAt'));
        $qb = $qb->andWhere($qb->expr()->notIn('thisEntity.status',['draft','canceled']));

        if (array_key_exists('filter',$options) && $options['filter']) {
            $filter = $this->checkAttr($options['filter']);
            $qb = $this->qbSetFilterParametr($qb,$filter);
        }

        $qb->groupBy('thisEntity.id');

        if ($options['orderBy']) {
            foreach ($options['orderBy'] as $key=>$val) {
                if (property_exists($this->entity,$key)) {
                    $qb->addOrderBy("thisEntity.".$key,$val);
                    $qb->addGroupBy("thisEntity.".$key);
                } else {
                    unset($options['orderBy'][$key]);
                }
            }
        }
        //dd($qb->getDQL());


        $query = $this->em->createQuery($qb->getDQL());

        $companyId = auth()->user()->getCompany()->getId();
        $query->setParameter(1, $companyId);
        //$query->setParameter(2, auth()->user()->getId());

        return $this->resultDataOptopns($query,$options);
    }
    public function getListRequisitionNoManager($options=[]) {

        $options = $this->parseOptions($options);

        $myFilter = [
            "manager"=>null,
            "status"=>"new"
        ];

        $options['filter'] = array_merge($options['filter'],$myFilter);


        $dqlScript = $this->filterByQuery($options['filter'],$options['orderBy']);
        $query = $this->em->createQuery($dqlScript);
        //dd($query->getDQL());
        return $this->resultDataOptopns($query,$options);
    }



    public function listMaterialRequisition(Requisition $requisition, $options=[]){
        $pagginate=[];
        $orderBy=[];

        if ($options && array_key_exists('pagginate',$options)) {
            $pagginate = $options['pagginate'];
        }
        if ($options && array_key_exists('orderBy',$options)) {
            $orderBy =  $this->checkAttr($options['orderBy']);


        }
        $requisition = parent::findByUuid($requisition);

        $data = $this->requisitionMaterialRepository->findAllByCompnay(['requisition'=>$requisition],$orderBy);

        return [
            'data'=>$data,
            'options'=>$options
        ];
    }


    public function getMaterialRequisition(Requisition $requisition,$materialIdRequisition){
        $materialIdRequisition = $this->requisitionMaterialRepository->findByUuid($materialIdRequisition);
        $requisition = $this->findByUuid($requisition);
        return $requisition->getMaterials()->contains($materialIdRequisition) ? $materialIdRequisition : null;
    }

    public function createMaterialRequisitionOther(Requisition $requisition,$arrayKeyAttrib){
        $requisition = parent::findByUuid($requisition);
        $arrayKeyAttrib['requisition'] = $requisition;
        $arrayKeyAttrib['type'] = 'other';

        if (array_key_exists('material',$arrayKeyAttrib) && is_object($arrayKeyAttrib['material'])) {
            $arrayKeyAttrib['directoryMaterial'] = $arrayKeyAttrib['material'];
        }

        if (array_key_exists('name',$arrayKeyAttrib) || array_key_exists('material',$arrayKeyAttrib)) {

            return $this->requisitionMaterialRepository->create($arrayKeyAttrib);
        } else {
            abort(400,"Одно из полей не указано 'name' или 'material'");
        }

    }

    public function deleteMaterialRequisitionOther(Requisition $requisition,$materialRequisitionId) {
        //$requisition->removeMaterial()

        $requisition = parent::findByUuid($requisition);
        $materialRequisition = $this->requisitionMaterialRepository->findByUuid($materialRequisitionId);
        if (!$materialRequisition) {
            abort(404,'Запись материала не найден');
        }
        if ($materialRequisition->getRequisition() !== $requisition) {
            abort('403','Запись материала не пренадлежит заявке');
        }
        return $this->requisitionMaterialRepository->delete($materialRequisitionId);
    }

    public function editMaterialRequisitionOther($requisition,$materialRequisitionId,$arrayKeyAttrib) {
        $requisition = parent::findByUuid($requisition);
        $materialRequisition = $this->requisitionMaterialRepository->findByUuid($materialRequisitionId);
        if ($materialRequisition->getRequisition() !== $requisition) {
            abort('403','Запись материала не пренадлежит заявке');
        }
        return $this->requisitionMaterialRepository->update($materialRequisition,$arrayKeyAttrib);
    }

    public function unSetMaterialRequisitionDirectory($requisition,$material_requisition) {
        $requisition = parent::findByUuid($requisition);
        if ($requisition->getInvoices()->count()>0) {
            abort(400,'У заявки имеются Счет-Заявки, материал открепить от справочника не открепить!');
        }
        $materialRequisition = $this->requisitionMaterialRepository->findByUuid($material_requisition);
        $materialRequisition->setDirectoryMaterial();

        return $this->save($materialRequisition);
    }

    public function setMaterialRequisitionDirectory(
        $requisition,
        $material_requisition,
        $material_directory
    ) {
        $requisition = parent::findByUuid($requisition);
        $materialRequisition = $this->requisitionMaterialRepository->findByUuid($material_requisition);
        $materialDirectory = $this->materialRepository->findMyCompnay($material_directory);

        if ($materialRequisition->getRequisition() !== $requisition) {
            abort(400,'Запись материала не пренадлежит заявке');
        }

        if ($materialRequisition->getDirectoryMaterial() && $requisition->getInvoices()->count()>0) {
            abort(400,"Материал из справочника уже назначен и имеются Счет-Заявки привязанные к заявке");
        }

        if ($this->requisitionMaterialRepository->findByMyCompnay(['requisition'=>$requisition,'directoryMaterial'=>$materialDirectory])) {
          //  abort(404,"Материал [".$materialDirectory->getName()."] справочника уже привязан к материалу заявки!");
        }

        if (!$materialDirectory) {
            abort(404,"Материал из справочника не найден");
        }

        if ($materialDirectory->getIsGroup() === true) {
            abort(400,"Выбранна группа из справочника, выбирете материал ");
        }

        $materialRequisition->setDirectoryMaterial($materialDirectory);
        $materialRequisition->setUnit($materialDirectory->getUnit());



        return $this->requisitionMaterialRepository->save($materialRequisition);
    }

    public function getMaterialRequisitionOne(
        $requisition,
        $material_requisition
    ) : RequisitionMaterials {
        $requisition = parent::findByUuid($requisition);
        $materialRequisition = $this->requisitionMaterialRepository->findByUuid($material_requisition);
        if ($materialRequisition->getRequisition() !== $requisition) {
            abort(403,'Запись материала не пренадлежит заявке');
        }

        return $materialRequisition;
    }



    public function cleanManager(Requisition $requisition) {
        $requisition = parent::findByUuid($requisition);
        $requisition->setManager(null);
        $requisition->setStatus('new');

        return $this->save($requisition);

    }
    public function getRequisitionOnly(Requisition $requisition)
    {

        return $requisition;
        //dd($requisition);
        $requisition_materials = $requisition->getMaterials();
        $requisitionResult = [];
        //$requisition->getMaterials()->clear();
        $requisitionResult['id'] = $requisition->getId()->serialize();
        $requisitionResult['fixed'] = $requisition->getFixed();
        $requisitionResult['number'] = $requisition->getNumber();
        $requisitionResult['status'] = $requisition->getStatus();
        $requisitionResult['type'] = $requisition->getType();
        $requisitionResult['end_at'] = $requisition->getEndAt();
        $requisitionResult['created_at']=$requisition->getCreatedAt();
        $requisitionResult['description']=$requisition->getDescription();
        $requisitionResult['materials']=null;
        $requisitionResult['manager']=$requisition->getManager();
        $requisitionResult['autor']=$requisition->getAutor();
       // $requisitionResult['autor'];

        //dd($requisition->getInvoices());
        $requisitionResult = $this->loadNew($requisitionResult);
        foreach ($requisition_materials as $material) {
            //dd($this->requisitionMaterialRepository->findByUuid($material->getId()));
            $requisitionResult->addMaterial($material);
            //dd($material->getInvoices());
            //$requisition->addMaterial($material);
        }
        //$requisitionResult['orign'] = $requisition;
        return $requisitionResult;
    }

    public function cancelRequisition(Requisition $requisition, $description): Requisition
    {

        //InvoicesRequisitionRepository
        $invoices = $this->em->getRepository(Invoice::class)->findBy(['requisition'=>$requisition]);

        foreach ($invoices as $invoice) {
            $invoice->setStatus('canceled');
            $invoice->setFixed(false);
            $invoice->setDescription($invoice->getDescription()."\r\n Отмена: ".$description);
            $this->em->persist($invoice);
        }
        $requisition->setStatus('canceled');
        $requisition->setDescription($description);
        $this->em->persist($requisition);
        $this->em->flush();
        return $requisition;
    }

    public function getMaterial($idMaterial): RequisitionMaterials|null
    {
        return $this->requisitionMaterialRepository->findByUuid($idMaterial);
    }

    public function    deliveryMasterMaterialsСonfirmedList(Requisition $requisition,Invoice $delivery,$options=[]) {
        $materials = [];

        foreach ($delivery->getMaterials() as $material) {
            $confirmedMaterial =  $this->invoiceMaterialsConfirmedRequisitionRepository->findAllByMyCompnay(['requisitionInvoiceMaterial'=>$material->getId()]);
            if ($confirmedMaterial) {
                $materials[] = [
                    'delivery_id'=>$delivery->getId()->serialize(),
                    'material_invoice'=>$delivery,
                    'material_confirmed'=>$confirmedMaterial
                ];
            }
        }

        return [
            "data"=>$materials[array_key_first($materials)],
            "options"=>$options
        ];
    }

    public function deliveryMaterialСonfirmed($materialСonfirmed)
    {

        $newConfirmedMaterial =  $this->invoiceMaterialsConfirmedRequisitionRepository->loadNew($materialСonfirmed);
        if (array_key_exists('files',$materialСonfirmed)) {
            foreach ($materialСonfirmed['files'] as $file) {
                $newConfirmedMaterial->addFile($file);
                $file->addRequisitionInvoiceMaterialReceived($newConfirmedMaterial);
                $this->em->persist($file);
                $this->em->persist($newConfirmedMaterial);
            }
        }
        $this->em->persist($newConfirmedMaterial);

        $invoiceMaterial = $newConfirmedMaterial->getRequisitionInvoiceMaterial();
        $invoice = $invoiceMaterial->getRequisitionInvoice();
        $requisitionMaterial = $invoiceMaterial->getRequisitionMaterial();

        $this->em->flush($newConfirmedMaterial);
        $count_confirmed = $this->invoiceMaterialsConfirmedRequisitionRepository->getQuantityConfirmed($invoiceMaterial);
        $count_invoce_material = $invoiceMaterial->getQuantity();


        if ($count_confirmed >= $count_invoce_material) {
            $newConfirmedMaterial->setStatus('completed');
            $requisitionMaterial->setStatus("completed");
            $invoiceMaterial->setStatus("completed");
            $invoice->setFixed(true);
            $this->em->persist($invoiceMaterial);
        } elseif ($count_confirmed>1) {
            $newConfirmedMaterial->setStatus('processing');
            $invoiceMaterial->setStatus("processing");
            $requisitionMaterial->setStatus("processing");
            $invoice->setFixed(true);
            $this->em->persist($invoiceMaterial);
        } else {
            $invoiceMaterial->setStatus("new");
            $requisitionMaterial->setStatus("processing");
            $this->em->persist($invoiceMaterial);
        }

        $req  = $requisitionMaterial->getRequisition();
        $this->setProcentProgressRequestion($req,$count_confirmed);
        $this->em->persist($newConfirmedMaterial);
        $this->em->persist($requisitionMaterial);


        $this->em->flush($newConfirmedMaterial);
        return $newConfirmedMaterial;
    }



    public function deliveryMasterMaterialsСonfirmed(array $materialListСonfirmed)
    {
        $result_list = [];

        foreach ($materialListСonfirmed as $materialСonfirmed) {

            $result_list[] = $this->deliveryMaterialСonfirmed($materialСonfirmed);

        }

        return $result_list;
    }

    public function setProcentProgressRequestion(Requisition $requisition, float $progress)
    {
        //$requisition = $this->findOne($requisition);
        if ($progress >= 100) {
            $requisition->setStatus("completed");
        }
        $requisition->setProgress($progress);
        $this->em->persist($requisition);
        $this->em->flush($requisition);
        return $requisition;
    }
}
