<?php

namespace Infrastructure\Repositories\Document;
use Doctrine\ORM\EntityManager;
use Domain\Contracts\Repository\Services\FileRepositoryContracts;
use Infrastructure\Repositories\AbstractRepository;
use Domain\Contracts\Repository\Document\TasksRepositoryContract;
use Domain\Contracts\Repository\Document\WorkflowRepositoryContract;
use Domain\Contracts\Repository\AccountsRepositoryContracts;
use ReflectionParameter;

use Domain\Entities\Business\Document\Tasks;
/**
 * CommentsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TasksRepository extends AbstractRepository implements TasksRepositoryContract
{
    private AccountsRepositoryContracts $accountsRepository;
    private WorkflowRepositoryContract $workflowRepository;

    public function __construct(
        EntityManager $em,
        Tasks $entity,
        AccountsRepositoryContracts $accountsRepository,
        WorkflowRepositoryContract $workflowRepository,
        FileRepositoryContracts $fileRepository
    ){
        $this->fileRepository = $fileRepository;
        $this->accountsRepository = $accountsRepository;
        $this->workflowRepository = $workflowRepository;
        parent::__construct($em, $entity);
    }

    public function create($arrAttributes)
    {
        //return $arrAttributes;
        $responsible = [];
        if (array_key_exists('responsible',$arrAttributes)){
            $responsible = $arrAttributes['responsible'];
            unset($arrAttributes['responsible']);
        }

        if (array_key_exists('workflow',$arrAttributes)){
            $workflow = $this->workflowRepository->find($arrAttributes['workflow']);
            unset($arrAttributes['workflow']);
        }

        if (array_key_exists('files',$arrAttributes)){
            $files = $arrAttributes['files'];
            unset($arrAttributes['files']);
        }

        $newTask = parent::loadNew($arrAttributes);

        $newTask->setWorkflow($workflow);

        $workflow->addTask($newTask);
        foreach ($responsible as $account) {
            $accountRep = $this->accountsRepository->find($account);
            if ($accountRep) {
                $newTask->addResponsible($accountRep);
                $accountRep->addTask($newTask);
            }
        }


        foreach ($files as $file) {
            $fileObj = $this->fileRepository->getFileHash($file);
            if ($fileObj) {
                $fileObj->addTask($newTask);
                $newTask->addFile($fileObj);

            }
        }

        $newTask = $this->save($newTask);
        $task = parent::find($newTask);

        return  $task;
    }


}
