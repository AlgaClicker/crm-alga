<?php

namespace Infrastructure\Repositories\Services;
use LaravelDoctrine\ORM\Facades\EntityManager;
use Doctrine\ORM\EntityRepository;
use Domain\Entities\Services\Logs;
use Doctrine\ORM\EntityManagerInterface;
use Illuminate\Support\Collection;
use Infrastructure\Util\JsonHelper;

/**
 * LogsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LogsRepository extends EntityRepository
{
    protected EntityManagerInterface $em;
    protected $_entityName = "Domain\Entities\Services\Logs";

    public function __construct(EntityManagerInterface $em)
    {
        //$this->em = $em->getRepository('Domain\Entities\Services\Logs');

        $this->_em = $em;
    }


    public function  listHistory($entityNamespace,$entityId) {
        $repLogs = $this->_em->getRepository($this->_entityName);
        $listLogs = $repLogs->findBy(['entity'=>$entityNamespace,'entityId'=>$entityId]);

        $logs = new Collection();

            foreach ($listLogs as $listLog) {

                //$logs->add($listLog->getEntity());
                $param = new \stdClass();

                if (gettype($listLog->getData()) === "string"){
                    $dataList = json_decode($listLog->getData());
                } elseif (gettype($listLog->getData()) === "object"){
                    $dataList = $listLog->getData();
                }
                $param->data_record = $listLog->getCreatedAt();

                    foreach ($dataList as $key=>$data) {
                        $key_class = $key;
                        $methodEntity = 'set'.ucfirst($key_class);
                        $param->{$key} = $data;
                    }

                $param->autor = $listLog->getAutorId()->toString();

                $logs->add($param);
            }
        return $logs->all();
    }

    private function serialize($entity)
    {

        return help()->jms->toJson($entity);
    }

    public function findByAccount($idAccount)
    {
        return $this->getRepository($this->_entityName)->findBy(['id'=>1]);
        // implement your find method
    }
    public function create($idAccount,$entity,$method) {
        if (!$entity) {
            return;
        }
        $log = new Logs();

        if(method_exists($entity,'getId')){
            $entityId = $entity->getId();
            $log->setEntityId($entityId);
        }
        if(method_exists($entity,'getUuid')){
            $entityId = $entity->getUuid();
            $log->setEntityUuid($entityId);
        }

        $data = $this->serialize($entity);

        $log->setCreatedAt(new \DateTime("now"));
        $log->setAutorId($idAccount);

        $log->setEntity(get_class($entity));
        $log->setData($data);
        $log->setMethod($method);

        EntityManager::persist($log);
        //EntityManager::flush();
    }

}
