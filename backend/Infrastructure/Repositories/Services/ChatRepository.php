<?php

namespace Infrastructure\Repositories\Services;
use Illuminate\Support\Collection;
use Domain\Entities\Services\Chat;
use Domain\Entities\Subscriber\Account;
use Domain\Entities\Business\Master\Requisition;
use Infrastructure\Repositories\AbstractRepository;
use Doctrine\ORM\EntityManager;
use Domain\Contracts\Repository\Services\FileRepositoryContracts;
use Domain\Contracts\Repository\Services\ChatRepositoryContracts;
/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ChatRepository extends AbstractRepository implements ChatRepositoryContracts
{


    private  FileRepositoryContracts $fileRepository;
    public function __construct(EntityManager $em, Chat $entity, FileRepositoryContracts $fileRepository)
    {
        $this->fileRepository =  $fileRepository;
        parent::__construct($em, $entity);
    }

    public function getListChatAccount(Account $account,$options=[]) {

        //dd($account->getId()->serialize());

        $qb = $this->em->createQueryBuilder();
        $qb->select("ac.id as from_message, autor.id as autor_message,autor.username as username")->from(get_class($this->entity),'ch');
        $qb->leftJoin("ch.accountTo","ac");
        $qb->leftJoin("ch.autor","autor");
        $qb->where($qb->expr()->eq('ch.autor',"?1"));
        $qb->orWhere($qb->expr()->eq('ac.id',"?1"));
        $qb->andWhere($qb->expr()->isNotNull("ch.accountTo"));
        $qb->andWhere($qb->expr()->isNull("ch.requisition"));
        //$qb->orderBy("ch.createdAt",'DESC');
        $qb->groupBy("ac.id,autor.id,autor.username");


        $query = $this->em->createQuery($qb->getDQL());

        $query->setParameter(1,$account->getId());
        //dd($qb->getQuery(),$query->getResult());

        $uuids = new Collection();

        foreach ($query->getArrayResult() as $row ) {


            //dd($row['id']->serialize());
            if (is_array($row)) {
                //$row['from_message'] = $row['from_message']->serialize();
                //$row['id'] = $row['id']->serialize();
                $from_message = $this->em->getRepository(get_class($account))->find($row["from_message"]);
                if ($row['from_message'] != $account->getId() && !$uuids->contains($from_message)) {
                    $uuids->add($from_message);
                }
                $autor_message = $this->em->getRepository(get_class($account))->find($row["autor_message"]);

                if ($row['autor_message'] != $account->getId() && !$uuids->contains($autor_message)) {
                    $uuids->add($autor_message);
                }


                if ($row['from_message'] != $account->getId()) {
                    //$uuids[] = $row["from_message"];
                    //$uuids[] = $this->em->getRepository(get_class($account))->find($row["from_message"]);
                } elseif ($row['autor_message'] == $account) {
                    //$uuids[] = $this->em->getRepository(get_class($account))->find($row["autor_message"]);
                }

            }

        }

        return  $uuids->all();
    }

    public function getMessagesRequisition(Requisition $requisition, $options=[]) {

        return parent::findAllByCompnay(["requisition"=>$requisition],['created_at'=>"ASC"]);

        return $requisition;
        $qb = $this->em->createQueryBuilder();
        $qb->select("ac.id as from_message, autor.id as autor_message,autor.username as username")->from(get_class($this->entity),'ch');
        $qb->leftJoin("ch.accountTo","ac");
        $qb->leftJoin("ch.autor","autor");
        $qb->where($qb->expr()->eq('ch.autor',"?1"));
        $qb->orWhere($qb->expr()->eq('ac.id',"?1"));
        $qb->andWhere($qb->expr()->isNotNull("ch.accountTo"));
        $qb->andWhere($qb->expr()->eq("ch.requisition","?2"));
        $qb->groupBy("ac.id,autor.id,autor.username");
        $qb->orderBy("ac.created_at","DESC");

        $query = $this->em->createQuery($qb->getDQL());
        $query->setParameter(1,$account->getId());
        $query->setParameter(2,$requisition);

        $uuids = new Collection();
        $result = $query->getArrayResult();

        foreach ($result as $row ) {
            if (is_array($row)) {
                $from_message = $this->em->getRepository(get_class($account))->find($row["from_message"]);
                if ($row['from_message'] != $account->getId() && !$uuids->contains($from_message)) {
                    $uuids->add($from_message);
                }
                $autor_message = $this->em->getRepository(get_class($account))->find($row["autor_message"]);

                if ($row['autor_message'] != $account->getId() && !$uuids->contains($autor_message)) {
                    $uuids->add($autor_message);
                }

                if ($row['from_message'] != $account->getId()) {
                    //$uuids[] = $row["from_message"];
                    //$uuids[] = $this->em->getRepository(get_class($account))->find($row["from_message"]);
                } elseif ($row['autor_message'] == $account) {
                    //$uuids[] = $this->em->getRepository(get_class($account))->find($row["autor_message"]);
                }
            }
        }
        return  $uuids->all();
    }


    public function getMessagesAccount($uuidAccount,$options=[]) {

        #TODO Сделать пагинацию, сейчас кривая

        $qb = $this->em->createQueryBuilder();
        $qb->select("ch.id")->from(get_class($this->entity),'ch');
        $qb->leftJoin("ch.accountTo","ac");
        $qb->leftJoin("ch.autor","autor");
        $qb->where(
            $qb->expr()->andX(
                $qb->expr()->eq('ac.id',"?1"),
                $qb->expr()->eq('autor.id',"?2")
            )
        );
        $qb->orWhere(
            $qb->expr()->andX($qb->expr()->eq('ac.id',"?2"),$qb->expr()->eq('autor.id',"?1"))
        );
        $qb->andWhere($qb->expr()->isNull("ch.requisition"));

        //$qb->andWhere($qb->expr()->eq('autor.id',"?2"));

        $query = $this->em->createQuery($qb->getDQL());
        $query->setParameter(1,$uuidAccount);
        $query->setParameter(2,auth()->user());

        //dd($query->getResult());
        $pagginate = [
            "page"=>1,
            "limit"=>$this->getDefaultLimit()
        ];
        $orderBy =[
            'createdAt'=>"DESC"
        ];

        if (!array_key_exists("pagginate",$options)) {
            $pagginate = $options['pagginate'];
        } else {
            $pagginate = $options['pagginate'];
        }

        $pagginate['pages'] = ceil(count($query->getResult())/$pagginate['limit']);

        $offset = ($pagginate['page']-1)*$pagginate['limit'];
        $data['data'] =$this->em->getRepository(get_class($this->entity))->findBy(['id'=>$query->getSingleColumnResult()],$orderBy,$pagginate['limit'],$offset);

            //$data['data'] = $this->findAllByPaginate(['id'=>$query->getSingleColumnResult()],$orderBy,$pagginate);
        $data['options']['pagginate'] = $pagginate;
        return $data;
    }

    public function deleteMessage($id) {
        $message = $this->findMyCompnay($id);

        if ($message->getAutor() == auth()->user() || $message->getAccountTo() == auth()->user()) {
            if ($this->deleteByUuid($message)) {
                return $message->getId()->serialize();
            }
        }
        return false;
    }

}

