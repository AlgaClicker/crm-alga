<?php

namespace Infrastructure\Repositories\Crm;
use Doctrine\ORM\EntityManager;
use Infrastructure\Repositories\AbstractRepository;
use Domain\Contracts\Repository\Crm\ProjectsRepositoryContracts;
use Infrastructure\Repositories\Services\FileRepository;
use Infrastructure\Repositories\Account\AccountsRepository;
use Domain\Entities\Business\Objects\Projects;
use Doctrine\Common\Collections\Criteria;

/**
 * CommentsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */

class ProjectsRepository extends AbstractRepository implements ProjectsRepositoryContracts
{
    private FileRepository $fileRepository;
    private AccountsRepository $accountsRepository;

    public function __construct(EntityManager $em, Projects $entity,AccountsRepository $accountsRepository,FileRepository $fileRepository)
    {
        $this->accountsRepository =$accountsRepository;
        $this->fileRepository = $fileRepository;
        parent::__construct($em, $entity);
    }

    public function findAllByAccount($arrKeyValue,$account) {
        $accountProject = parent::findAllByUser($arrKeyValue);
        return $accountProject;

    }

    public function countSpecification($projectId)
    {
        $criteria = Criteria::create()
            ->where(Criteria::expr()->eq("delete", false));
        $project = $this->find([$projectId]);

        return $project->getSpecification()->matching($criteria)->count();;
    }

    public function update($projectId,$arrKeyValue){
        $project = $this->find($projectId);

        if (array_key_exists('accounts',$arrKeyValue)) {
            $accounts = $arrKeyValue['accounts'];

            if ($accounts) {
                unset($arrKeyValue['accounts']);
                $project->getAccountsAccessProjects()->clear();
                foreach ($accounts as $account) {
                    $project->addAccountsAccessProject($account);
                }
            }
        }

        if (array_key_exists('files',$arrKeyValue)) {

            $files = $arrKeyValue['files'];

            unset($arrKeyValue['files']);
            $project->getFiles()->clear();
            //$this->save($project);

            foreach ($files as $file) {
                $fileObj = $this->fileRepository->find($file);
                $fileObj->getProjects()->clear();
                $this->fileRepository->save($fileObj);
                if ($fileObj && !$project->getFiles()->contains($fileObj)) {
                    $project->addFile($file);
                    if (!$fileObj->getProjects()->contains($project)) {
                        $fileObj->addProject($project);
                        $this->fileRepository->save($fileObj);
                    }

                }
            }

        }

        $project = parent::update($project,$arrKeyValue);

        return $project;
    }
}
