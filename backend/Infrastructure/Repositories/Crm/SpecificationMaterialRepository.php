<?php

namespace Infrastructure\Repositories\Crm;
use Doctrine\ORM\EntityManager;
use Domain\Entities\Business\Master\Requisition;
use Domain\Entities\Business\Master\RequisitionMaterials;
use Domain\Entities\Business\Objects\Specification;
use Infrastructure\Repositories\AbstractRepository;
use Domain\Contracts\Repository\Crm\SpecificationMaterialRepositoryContracts;
use Domain\Entities\Business\Objects\SpecificationMaterial;
/**
 * CommentsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SpecificationMaterialRepository extends AbstractRepository implements SpecificationMaterialRepositoryContracts
{
    public function __construct(EntityManager $em, SpecificationMaterial $entity)
    {
        parent::__construct($em, $entity);
    }


    public function getMaterialFromSpec($spec,$idMaterial) {

        $qb = $this->em->createQueryBuilder();
        $qb = $qb->select('spm')->from($this->entityNamespace, 'spm')
            ->leftJoin(get_class($spec),'sp')
            ->where($qb->expr()->in('sp.id','?1'))
            ->andWhere($qb->expr()->eq('spm.id','?2'))
            ->andWhere($qb->expr()->eq('spm.isGroup','false'));
        $qb->setMaxResults(1);
        $query = $this->em->createQuery($qb->getDQL());
        $query->setParameter(1,$spec);
        $query->setParameter(2,$idMaterial);
        return $query->getOneOrNullResult();
    }

    public function getListMaterials(Specification $specification) {
        return $specification->getSpecificationMaterials();
        /*
        $qb = $this->em->createQueryBuilder();
        $qb->select('spm')->from($this->entityNamespace, 'spm')
            ->leftJoin(get_class($specification),'sp')
            ->where($qb->expr()->eq('sp.id','?1'));
        $query = $this->em->createQuery($qb->getDQL());

        //dd($query->getDQL());
        $query->setParameter(1,$specification);
        return $query->getResult();
        */
    }

    private function setIndexMaterial(SpecificationMaterial $specificationMaterial,$index) {
        $spec = $specificationMaterial->getSpecification();

        $qb = $this->em->createQueryBuilder();
        $qb->select('spm')->from($this->entityNamespace, 'spm');
        $qb->join('spm.specification','sp');
        $qb->where($qb->expr()->in('sp.id',':specification'));
        $qb->orderBy('spm.index','ASC');

        $query = $this->em->createQuery($qb->getDQL());
        $query->setParameter('specification',$spec);

        if ($index > count($query->getResult())) {
            $index = count($query->getResult());
            if ($index === 0) {
                $index = 1;
            }
            $specificationMaterial->setIndex($index);
            return $specificationMaterial;
        }

        $idx = 1;

        foreach ($query->getResult() as $specMaterial) {

            if ($idx === $index) {
                $specificationMaterial->setIndex($idx);
                $idx++;
            }

            $specMaterial->setIndex($idx);
            $this->em->persist($specMaterial);
            $idx++;
        }

        //dd($index,count($query->getResult()),$query->getResult());
        return $specificationMaterial;

    }

    public function createMaterial(Specification $specification, $arrayKeyAttrib) {
        if (array_key_exists('isGroup',$arrayKeyAttrib) && $arrayKeyAttrib['isGroup'] === true) {
            unset($arrayKeyAttrib['quantity']);
            unset($arrayKeyAttrib['unit_code']);
            unset($arrayKeyAttrib['unit']);
        }

        $material = $this->loadNew($arrayKeyAttrib);
        $material->addSpecification($specification);
        $specification->addSpecificationMaterial($material);

        if (array_key_exists('index',$arrayKeyAttrib)) {
            $material = $this->setIndexMaterial($material,$arrayKeyAttrib['index']);
        } else {
            $count = $specification->getSpecificationMaterials()->count();
            $material->setIndex($count);
        }
        $material = parent::save($material);

        $this->reIndexMaterials($specification);
        $this->em->flush();
        $this->em->close();

        return $material;
    }


    public function update( $specificationMaterial, $arrAttributes)
    {

        if (array_key_exists('index',$arrAttributes)) {
            $specificationMaterial->setIndex($arrAttributes['index']);
            //$specificationMaterial = $this->setIndexMaterial($specificationMaterial,$arrAttributes['index']);
            unset($arrAttributes['index']);
            $this->em->persist($specificationMaterial);

        }

        if (!array_key_exists("material",$arrAttributes)) {
            $specificationMaterial->setMaterial(null);
        }

        if ($specificationMaterial->getIsGroup() === false) {
            unset($arrAttributes['is_group']);
        } else {
            $specificationMaterial->setUnit(null);
        }
        $material = parent::update($specificationMaterial, $arrAttributes); // TODO: Change the autogenerated stub
        $this->reIndexMaterials($specificationMaterial->getSpecification()->first());
        $this->em->flush();
        $this->em->close();
        return $material;
    }

    public function searchMaterial(Specification $specification,$text) {

        $materials =  $specification->getSpecificationMaterials();

        $qb = $this->em->createQueryBuilder();
        $qb->select('mat')->from($this->entityNamespace, 'mat')
        ->where($qb->expr()->in('mat.id','?1'));
        $qb->andWhere("LOWER(mat.fullname) LIKE LOWER('%$text%')");
        $query = $this->em->createQuery($qb->getDQL());
        $query->setParameter(1,$materials);

        return $query->getResult();
    }

    public function inWorkMaterial(SpecificationMaterial $material): int {
        $qb = $this->em->createQueryBuilder();
        $qb->select('SUM(reg_m.quantity) as sum')->from(get_class(new Requisition()), 'reg');
        $qb->leftJoin('reg.materials','reg_m');
        $qb->where($qb->expr()->eq('reg_m.specificationMaterial','?1'));
        $qb->andWhere($qb->expr()->notIn('reg.status',['inprogressv','completed','draft','canceled','manage']));
        $qb->andWhere($qb->expr()->eq('reg.company','?2'));
        $query = $this->em->createQuery($qb->getDQL());
        $query->setParameter(1,$material);
        $query->setParameter(2,auth()->user()->getCompany());


        if ($query->getResult()  && array_key_exists('sum',$query->getSingleResult())) {
            return $query->getSingleResult()['sum'] ?? 0;
        } else {
            return 0;
        }
    }

    public function reIndexMaterials(Specification $specification) {

        $qb = $this->em->createQueryBuilder();

        $qb->select('spm')->from($this->entityNamespace, 'spm');
        $qb->join('spm.specification','sp');
        $qb->where($qb->expr()->in('sp.id',':specification'));
        $qb->orderBy('spm.index','ASC');

        $query = $this->em->createQuery($qb->getDQL());
        $query->setParameter('specification',$specification);

        $idx = 1;
        foreach ($query->getResult() as $specMaterial) {
            $specMaterial->setIndex($idx);
            $this->em->persist($specMaterial);
            $idx++;
        }
    }

    public function deleteByUuid($specificationMaterial) {
        $id = $specificationMaterial->getId()->serialize();
        $specification = $specificationMaterial->getSpecification()->first();
        parent::deleteByUuid($specificationMaterial);
        $this->reIndexMaterials($specification);
        $this->em->flush();
        $this->em->close();
        return [
            'id'=>$id,
            'delete'=>'ok'
        ];
    }

    public function remnantsMaterial(SpecificationMaterial $material): ?int {
        $qb = $this->em->createQueryBuilder();
        $qb->select('SUM(reg_m.quantity) as sum')->from(get_class(new Requisition()), 'reg');
        $qb->leftJoin('reg.materials','reg_m');
        $qb->where($qb->expr()->eq('reg_m.specificationMaterial','?1'));
        // Считаем с момента назначением менеджера к заявке
        $qb->andWhere($qb->expr()->in('reg.status',['manage','inprogress','completed']));
        $qb->andWhere($qb->expr()->eq('reg.company','?2'));


        $query = $this->em->createQuery($qb->getDQL());

        $query->setParameter(1,$material);
        $query->setParameter(2,auth()->user()->getCompany());

        //dd($query->getDQL(),$query->getSQL(),$query->getResult(),$material);
        if ($query->getResult() && array_key_exists('sum',$query->getSingleResult())) {
            return $query->getSingleResult()['sum'];
        } else {
            return 0;
        }
    }

}
