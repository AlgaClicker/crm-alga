<?php

namespace Infrastructure\Repositories\Crm;
use Core\Exceptions\ApplicationException;
use Doctrine\ORM\EntityManager;

use DoctrineProxies\__CG__\Domain\Entities\Business\Objects\Specification;
use Domain\Contracts\Repository\Crm\WorkpeopleRepositoryContract;
use Illuminate\Support\Collection;
use Infrastructure\Repositories\AbstractRepository;
use Domain\Contracts\Repository\Crm\BrigadeRepositoryContracts;
use Domain\Contracts\Repository\Crm\SpecificationRepositoryContracts;
use Domain\Entities\Business\Master\Brigade;
use Infrastructure\Repositories\Document\BrigadeSpecificationRepository;

/**
 * CommentsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */

class BrigadeRepository extends AbstractRepository implements BrigadeRepositoryContracts
{
    private BrigadeSpecificationRepository $brigadeSpecificationRepository;
    private SpecificationRepositoryContracts $specificationRepository;
    private WorkpeopleRepositoryContract $workpeopleRepository;
    public function __construct(
        EntityManager $em,
        Brigade $entity,
        SpecificationRepositoryContracts $specificationRepository,
        BrigadeSpecificationRepository $brigadeSpecificationRepository,
        WorkpeopleRepositoryContract $workpeopleRepository
    ) {
        $this->specificationRepository = $specificationRepository;
        $this->brigadeSpecificationRepository = $brigadeSpecificationRepository;
        $this->workpeopleRepository = $workpeopleRepository;
        parent::__construct($em, $entity);
    }

    public function deleteById($brigadeId)
    {

        $this->entity = $this->find($brigadeId);
        $brigadeSpecification = $this->entity->getBrigadeSpecification()->filter(function($el){
                return $el->getEndAt() < (new \DateTimeImmutable('now'));
        });


        if ($this->entity->getBrigadePay()->count()>0) {
            throw new ApplicationException("У бригады имеются выплаты по бригаде", 400);
        }

        if ($brigadeSpecification->count()>0) {
            throw new ApplicationException("У бригады имеются назначения спецификаций, на текущую дату", 400);
        }

        if ($this->entity->getWorkpeoples()->count()>0) {
            foreach ($this->entity->getWorkpeoples() as $workpeople) {
                $workpeople = $this->workpeopleRepository->findMyCompnay($workpeople);
                $workpeople->setBrigade(null);
                $this->workpeopleRepository->save($workpeople);
            }
        }


        return parent::deleteById($brigadeId); // TODO: Change the autogenerated stub
    }



    public function update($entity, $arrAttributes)
    {

        return parent::update($entity, $arrAttributes); // TODO: Change the autogenerated stub
    }



    public function listSpecificationActual($brigadeId) {

        return $this->brigadeSpecificationRepository->listSpecificationActual($brigadeId);
    }


    public function setSpecificationDateEndWork($specificationId, $brigadeId, \DateTimeImmutable $date_end) {
        $brigadeSpecification = [
            "specification"=>$this->specificationRepository->findMyCompnay($specificationId),
            "brigade"=>$this->findMyCompnay($brigadeId),
            "endAt"=>$date_end->modify('tomorrow')
        ];

        $selDoc = ($this->brigadeSpecificationRepository->getSpecificationDateEndWork($specificationId, $brigadeId, $date_end));


        if (count($selDoc)>0) {
            $date_end_doc = $selDoc[0]->getEndAt();
            $date_start_doc = $selDoc[0]->getCreatedAt();
            throw new ApplicationException("У бригады [$brigadeId] имеется назначение [".$selDoc[0]->getId()->serialize()."] на спецификацию [$specificationId], с ".$date_start_doc->format('d-m-Y H:i')." до ".$date_end_doc->format('d-m-Y H:i')." числа, вы указали c ".(new \DateTimeImmutable('now'))->format('d-m-Y H:i').' по '.$date_end->modify("midnight")->format('d-m-Y H:i'),400);
        } else {
            return $this->brigadeSpecificationRepository->create($brigadeSpecification);
        }

        //return $this->brigadeSpecificationRepository->save($brigadeSpecification);
    }


    public function deleteSpecificationsBrigade($idBrigade,$idDocSpecificationsBrigade){
        return $this->brigadeSpecificationRepository->deleteById($idDocSpecificationsBrigade);
    }


    public function getSpecificationsBrigade(Brigade $brigade) {
        $specification = new Specification();

        $specifications = new Collection();
        $this->brigadeSpecificationRepository->findAllByMyCompnay([]);

        return $specifications->all();
    }
}
