<?php

namespace Infrastructure\Repositories\Crm;
use Doctrine\ORM\EntityManager;
use Infrastructure\Repositories\AbstractRepository;
use Domain\Contracts\Repository\Crm\WorkpeopleRepositoryContract;
use Domain\Entities\Business\Company\Workpeople;
use Doctrine\Common\Collections\Criteria;

/**
 * CommentsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */

class WorkpeopleRepository extends AbstractRepository implements WorkpeopleRepositoryContract
{
    public function __construct(EntityManager $em, Workpeople $entity)
    {
        parent::__construct($em, $entity);
    }

    public function getListWorkpeople($options=[]): array
    {
        $options = $this->parseOptions($options);

        $qb = $this->em->createQueryBuilder();
        $qb = $qb->select('thisEntity')->from(Workpeople::class,'thisEntity');
        $qb = $qb->where($qb->expr()->eq('thisEntity.company',"?1"));
        if ($this->account->getRoles()->getService() !== "upravlenie") {
            $qb = $qb->andWhere($qb->expr()->eq('thisEntity.master',"?2"));
        }
        if ( array_key_exists('orderBy',$options) && $options['orderBy']) {
            foreach ($options['orderBy'] as $key=>$val) {
                if (property_exists($this->entity,$key)) {
                    $qb->addOrderBy("thisEntity.".$key,$val);
                } else {
                    unset($options['orderBy'][$key]);
                }
            }
        }
        $qb = $this->qbSetFilterParametr($qb,$options['filter']);
        $query = $this->em->createQuery($qb->getDQL());

        $company = auth()->user()->getCompany();


        $query->setParameter(1, $company->getId());
        if ($this->account->getRoles()->getService() !== "upravlenie") {
            $query->setParameter(2, $this->account);
        }


        return $this->resultQueryData($query,$options);
    }

}
