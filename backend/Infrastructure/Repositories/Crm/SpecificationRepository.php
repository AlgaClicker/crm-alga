<?php

namespace Infrastructure\Repositories\Crm;
use Doctrine\ORM\EntityManager;
use Domain\Contracts\Repository\Business\StockRepositoryContracts;
use Domain\Entities\Subscriber\Account;
use Illuminate\Support\Collection;
use Infrastructure\Repositories\AbstractRepository;
use Domain\Contracts\Repository\Crm\SpecificationRepositoryContracts;
use Infrastructure\Repositories\Crm\SpecificationResourcesRepository;
use Infrastructure\Repositories\Crm\SpecificationMaterialRepository;
use Infrastructure\Repositories\Crm\SpecificationTypeWorksRepository;
use Domain\Contracts\Repository\Services\FileRepositoryContracts;
use Domain\Entities\Business\Objects\Specification;
use Domain\Entities\Business\Company\Company;
use Domain\Entities\Business\Objects\SpecificationMaterial;
use Infrastructure\Repositories\Directory\MaterialRepository;
use Domain\Contracts\Repository\AccountsRepositoryContracts;
use Domain\Contracts\Repository\Document\ContractsRepositoryContract;
use Doctrine\Common\Collections\Criteria;
use Doctrine\Common\Collections\Expr\Comparison;
use Domain\Entities\Business\Objects\Objects;


/**
 * CommentsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SpecificationRepository extends AbstractRepository implements SpecificationRepositoryContracts
{
    private SpecificationResourcesRepository $specResRepository;
    private SpecificationMaterialRepository $specMatRepository;
    private SpecificationTypeWorksRepository $specTypeWorksRepository;
    private FileRepositoryContracts $fileRepository;
    private MaterialRepository $materialRepository;
    private AccountsRepositoryContracts $accountsRepository;
    private StockRepositoryContracts $stockRepository;
    private  ContractsRepositoryContract $contractsRepository;

    private Company $company;
    public function __construct(
        EntityManager $em,
        Specification $entity,
        SpecificationResourcesRepository $specResRepository,
        SpecificationMaterialRepository $specMatRepository,
        SpecificationTypeWorksRepository $specTypeWorksRepository,
        MaterialRepository $materialRepository,
        FileRepositoryContracts $fileRepository,
        AccountsRepositoryContracts $accountsRepository,
        StockRepositoryContracts $stockRepository,
        ContractsRepositoryContract $contractsRepository


    ){
        $this->specResRepository = $specResRepository;
        $this->specMatRepository = $specMatRepository;
        $this->specTypeWorksRepository = $specTypeWorksRepository;
        $this->materialRepository = $materialRepository;
        $this->fileRepository = $fileRepository;
        $this->accountsRepository = $accountsRepository;
        $this->stockRepository = $stockRepository;
        $this->contractsRepository = $contractsRepository;

        $this->company = auth()->user()->getCompany();
        parent::__construct($em, $entity);
    }

    public function findMyCompnay($entityId)
    {

        return parent::findMyCompnay($entityId); // TODO: Change the autogenerated stub
    }

    public function new($arrAttributes)
    {
        $arrAttributes['draft'] = true;
        return parent::new($arrAttributes); // TODO: Change the autogenerated stub
    }

    public function update($entity, $arrAttributes)
    {

        $entity =  parent::update($entity, $arrAttributes); // TODO: Change the autogenerated stub
        return $this->find($entity);
    }

    public function create($arrAttributes)
    {



        $arrAttributes['draft'] = true;
        $object = $arrAttributes['object'];



        $stockAttr = [
            'name'=>'Склад:'.$arrAttributes['name'],
            'fullname'=>'Служебный склад спецификации:'.$arrAttributes['name'],
            'address'=>$object->getAddress(),
            'autor'=>auth()->user()
        ];

        //$arrAttributes['stock'] = $stock;

        $spec = $this->loadNew($arrAttributes);
        $this->em->persist($spec);

        if (array_key_exists('contract', $arrAttributes)) {
            $contract = $this->contractsRepository->findByUuid($arrAttributes['contract']);
            if ($contract->getFixed() !== true) {
                abort('400','Указанный договор не фиксирован');
            }
            $contract->setSpecification($spec);
            $spec->addContract($contract);
        }


        $stockAttr['specification'] = $spec;
        $stock = $this->stockRepository->create($stockAttr);
        $spec->setStock($stock);
        $this->em->persist($spec);
        $this->em->flush();
        $this->em->close();

        return $this->find($spec); // TODO: Change the autogenerated stub
    }


    public function getSpecificationNoFixed(Specification $specification): Specification|null {
        if ($specification->getChildren()->count() > 0) {
            $listChildrenSpec = $specification->getChildren();
            foreach ($listChildrenSpec as $childrenSpec) {
                if ($childrenSpec->getFixed() == false) {
                    return $childrenSpec;
                }
            }
        } elseif ($specification->getFixed() == false) {
            return $specification;
        }
        return null;
    }

    public function getSpecificationFixed(Specification $specification): Specification|null {

        if ($specification->getChildren()->count() > 0) {
            $qb = $this->em->createQueryBuilder();
            $qb->select('spec')
                ->from($this->entityNamespace, 'spec')
                ->where('spec.fixed=true')
                ->andWhere($qb->expr()->eq('spec.parent', '?1'))
                ->andWhere($qb->expr()->isNull('spec.deletedAt'))
            ->orderBy("spec.idx","DESC");
            $query = $this->em->createQuery($qb->getDQL());
            $query->setParameter(1,$specification->getId()->serialize());
                if ($query->getResult()) {
                    return $query->getResult()[0];
                }

        } elseif ($specification->getFixed() == true && $specification->getChildren()->count() == 0 && !$specification->getParent()) {
            return $specification;
        }
        return null;
    }

    public function listSpecificationsByObject(Object $object,$options=[])
    {
        $options = $this->parseOptions($options);
        $qb = $this->em->createQueryBuilder();
        $qb->select('spec')
            ->from(Specification::class, 'spec')
            ->leftJoin(Objects::class,'obj','WITH','spec.object = obj.id')
            ->where($qb->expr()->eq('obj.id', ':objectId'))
            ->andWhere($qb->expr()->eq('spec.company', ':companyId'));

        $query = $this->em->createQuery($qb->getDQL());
        $query->setParameter('objectId',$object->getId()->serialize());
        $query->setParameter('companyId',auth()->user()->getCompany()->getId()->serialize());


        return $this->resultQueryData($query,$options);

    }
    public function listSpecificationsAllFixed($options): array {

        $allSpec = $this->findAllMyCompnay();
        $resultListSpec = new Collection();
        foreach ($allSpec as $spec) {
            $fixedSpec = $this->getSpecificationFixed($spec);
            if (!$resultListSpec->contains($fixedSpec) && $fixedSpec) {
                $resultListSpec->add($fixedSpec);
            }
        }
        return $resultListSpec->all();
    }

    public function specificationGetMaxIndex(Specification $specification): Specification|null {

        if ($specification->getIdx() == 0 && $specification->getChildren()->count() > 0) {

        } elseif ($specification->getIdx() == 0 && $specification->getChildren()->count() == 0) {

        } elseif ($specification->getIdx() > 0 && $specification->getParent()) {

        }

        return null;

        $qb = $this->em->createQueryBuilder();
        $qb->select('spec')
            ->from($this->entityNamespace, 'spec')
            ->where('spec.fixed=true')
            ->andWhere($qb->expr()->eq('spec.parent', '?1'))
            ->andWhere($qb->expr()->isNull('spec.deletedAt'))
            ->orderBy("spec.idx","DESC");
        $query = $this->em->createQuery($qb->getDQL());
        $query->setParameter(1,$specification->getId()->serialize());


    }

    public function delete($entityId)
    {
        $this->entity = $this->findMyCompnay($entityId);

        if ($this->entity->getParent()) {
            $parentSpec = $this->findMyCompnay($this->entity->getParent());

            $list = [];
            $idx = 1;

            foreach ($parentSpec->getChildren() as $spec) {

                if ($this->entity->getId() !== $spec->getId()) {
                    $list[$idx]['id'] = $spec->getId();
                    $list[$idx]['idx'] = $idx;
                    $idx++;
                }
            }

            foreach ($list as $key=>$idSpec) {
                 $spec = $this->findMyCompnay($idSpec['id']);
                 $spec->setIdx($idSpec['idx']);
                 $this->em->persist($spec);
            }
        }
        //$this->stockRepository->delete($this->entity->GetStock());
        return parent::delete($entityId);

    }

    public function listSpecificationsResponsible(Account $responsible) {
        $account = auth()->user();
        $newListSpec = new Collection();
        $qb = $this->em->createQueryBuilder();
        $qb->select('spec')
            ->from($this->entityNamespace, 'spec')
            ->where('spec.fixed=true')
            ->andWhere($qb->expr()->eq('spec.company', '?1'))
            ->andWhere($qb->expr()->isNull('spec.deletedAt'))
            ->andWhere($qb->expr()->isNull('spec.parent'));

        $query = $this->em->createQuery($qb->getDQL());
        $query->setParameter(1,$account->getCompany()->getId()->serialize());
        $list = $query->getResult();

        foreach ($list as $spec) {
            if ($spec->getChildren()->count()>0) {
                $qb = $this->em->createQueryBuilder();
                $qb->select('spec')
                    ->from($this->entityNamespace, 'spec')
                    ->where('spec.fixed=true')
                    ->andWhere('spec.parent = ?1')
                    ->orderBy('spec.idx','DESC');
                $query = $this->em->createQuery($qb->getDQL());
                $query->setParameter(1,$spec->getId()->serialize());

                if (count($query->getResult())>0) {
                    $specAdd = $query->getResult()[0];

                    if ($specAdd->getResponsibles()->contains($responsible)) {
                        $newListSpec->add($query->getResult()[0]);
                    }
                }
            } else {

                if ($spec->getResponsibles()->contains($responsible)) {
                    $newListSpec->add($spec);
                }
            }

        }
        return $newListSpec->all();
    }

    public function setTypeWork($arrKeyValue) {

        if (array_key_exists('ID',$arrKeyValue)) {
            $arrKeyValue['idx'] = $arrKeyValue['ID'];
        }
        $specTypeWorks = $this->specTypeWorksRepository->findBy(['idx'=>$arrKeyValue['idx']]);
        if (!$specTypeWorks) {
            $specTypeWorks = $this->specTypeWorksRepository->loadNew($arrKeyValue);
            $specTypeWorks = $this->specTypeWorksRepository->save($specTypeWorks);
        }
        return $specTypeWorks;
    }

    public function changeAdd($specificationId,$arrKeyValue) {
        unset($arrKeyValue['id']);
        unset($arrKeyValue['parent']);

        $specification = $this->findMyCompnay($specificationId);

        $sp1 = new Specification();
        $sp =  $this->loadNew($arrKeyValue);

        if ($specification->getParent()) {

            $sp->setParent($specification->getParent());
            $sp->setObject($specification->getParent()->getObject());
            $sp->setIdx($specification->getParent()->getChildren()->count()+1);

        } else {
            $sp->setParent($specification);
            $sp->setObject($specification->getObject());
            $sp->setIdx($specification->getChildren()->count()+1);
        }

        foreach ($specification->getResponsibles() as $responsible) {
            $sp->addResponsible($responsible);

        }

        foreach ($specification->getSpecificationMaterials() as $material) {
            $sp->addSpecificationMaterial($material);
            $material->addSpecification($sp);
            $this->em->persist($material);
        }

        foreach ($specification->getSpecificationResources() as $resource) {

            $sp->addSpecificationResource($resource);
        }

        foreach ($specification->getSpecificationTypeworks() as $typework) {
            $sp->addSpecificationTypework($typework);
        }

        foreach ($this->entity->getFiles() as $file) {
            $sp->addFile($file);
        }

        $specification->setFixed(true);
        $sp->setAutorId(auth()->user()->getAuthIdentifier());
        if ($specification->getIdx() <> 0 ) {

            $sp->setParent($specification->getParent());
        } else {
            $sp->setParent($specification);
            $specification->addChild($sp);
        }

        if (array_key_exists('contract', $arrKeyValue) && $arrKeyValue['contract']) {
            $contract = $this->contractsRepository->findByUuid($arrKeyValue['contract']);
            if (!$contract) {
                abort('404','Указанный договор не найден');
            }

            if ($contract->getFixed() !== true) {
                abort('400','Указанный договор не фиксирован');
            }
            $contract->setSpecification($specification);
            $specification->addContract($contract);
        }

        $this->em->persist($specification);
        $this->save($sp);
        return $sp;
    }

    public function ready($id) {
        $sp = new Specification();

        $spec = $this->findByMyCompnay(["id"=>$id]);

            return $spec;
            dd("end",$materialsSpecParent);
    }

    #Список фиксированных спецификаций принадлежашей текущей спецификации
    public function getListFixedSpec(Specification $specification) {
        $listSpec = new Collection();
        $spec = $this->findMyCompnay($specification);
        if (!$spec->getParent()) {
            $listSpec->add($spec);
            return $listSpec->all();
        } else {
            $listSpec->add($spec);
            foreach ( $spec->getChildren() as $child) {
                if ($child->getFixed() == true) {
                    $listSpec->add($child);
                }
            }
        }
        return $listSpec;

    }

    public function listSpecActual() {

        $qb = $this->em->createQueryBuilder();
        $qb->select("spec")->from(Specification::class,'spec');
        $qb->where("spec.company = ?0");
        $qb->andWhere("spec.fixed = 'true'");
        $qb->andWhere($qb->expr()->eq("spec.idx","0"));

        //$qb->andWhere($qb->expr()->between('spec.data',$startDate->format('Y-m-d H:i:s'),$endDate->format('Y-m-d H:i:s')));

        $qb->andWhere($qb->expr()->isNull('spec.parent'));
        $qb->setParameter(0,$this->company);


        $query = $this->em->createQuery($qb->getDQL());
        $query->setParameter(0,$this->company);
        $listParent = $query->getResult();
        $listSpecResult = new Collection();
        foreach ( $listParent as $parentSpec ) {
            $activeSpec = $this->getSpecificationFixed($parentSpec);
            if ($activeSpec) {
                $listSpecResult->add($activeSpec);
            }
        }
        return $listSpecResult->all();
    }

    public function countByCompnay($arrKeyValue = [])
    {
        return parent::countByCompnay($arrKeyValue); // TODO: Change the autogenerated stub
    }


    public function getMaterialSpecification(Specification $specification,SpecificationMaterial $materialSpecification) : SpecificationMaterial|null {

        $material = $this->specMatRepository->findByUuid($materialSpecification);
        if ($material->getSpecification()->contains($specification)) {
            return $material;
        }
    }



    public function specificationMaterialRemnants(Specification $specification,SpecificationMaterial $materialSpecification=null): array
    {
        $listSpec = new Collection();
        if ($materialSpecification) {
            $material = $this->specMatRepository->findByUuid($materialSpecification);

            $matSpecification['quantity'] = $material->getQuantity();
            $matSpecification['remnant'] = $this->specMatRepository->remnantsMaterial($material) ?? 0;
            $matSpecification['in_work'] = $this->specMatRepository->inWorkMaterial($material) ?? '0';
            $matSpecification['procent'] = ($matSpecification['remnant']/$matSpecification['quantity'])*100;
            return $matSpecification;

        } else {
            foreach ($specification->getSpecificationMaterials() as $material) {
                $matSpecification['id'] = $material->getId()->serialize();

                $matSpecification['material'] = $material;
                $matSpecification['quantity'] = $material->getQuantity();
                $matSpecification['remnant'] = $this->specMatRepository->remnantsMaterial($material) ?? 0;
                $matSpecification['in_work'] = $this->specMatRepository->inWorkMaterial($material) ?? '0';
                if ($matSpecification['quantity']) {
                    $matSpecification['procent'] = ($matSpecification['remnant']/$matSpecification['quantity'])*100;
                } else {
                    $matSpecification['procent']=0;
                }
                    $listSpec->add($matSpecification);

            }
        }
        return $listSpec->all();
    }

    public function checkSpecificationResponsible(Specification $specification,Account $account) {

        return $specification->getResponsibles()->contains($account);

        dd('12',$specification->getResponsibles()->toArray());
    }

    public function addResponsibleSpecification(Specification $specification, Account $account) {
        if ($specification->getResponsibles()->contains($account)) {
            abort('400','Аккаунт ['.$account->getUsername().'] уже является ответственным по спецификации ['.$specification->getName().']');
        }

        $specification->addResponsible($account);
        $account->addSpecification($specification);
        $this->em->persist($specification);
        $this->em->persist($account);
        $this->em->flush();
        return $specification->getResponsibles();
    }

    public function deleteResponsibleSpecification(Specification $specification, Account $account) {
        if (!$specification->getResponsibles()->contains($account)) {
            abort('400','Аккаунт ['.$account->getUsername().'] не является ответственным по спецификации ['.$specification->getName().']');
        }

        $specification->removeResponsible($account);
        $this->em->persist($specification);
        $this->em->flush();
        return $specification->getResponsibles();
    }

    public function setSpecificationContract(Specification $specification, $contract_id)
    {
        if ($specification->getFixed() === true) {
            abort(400,'Фиксированная спецификация');
        }
        $contract = $this->contractsRepository->findByUuid($contract_id);

        if (!$contract) {
            abort(400,'Указанный договор не найдн');
        }
        if ($contract->getFixed() !== true) {
            abort(400,'Указанный договор не фиксирован');
        }

        if ($contract->getType() !== 'construction') {
            abort(400,'Указанный договор не является дорговором подряда');
        }

        if (!$specification->getContracts()->contains($contract)) {
            $specification->addContract($contract);
            $contract->addSpecification($specification);
            $this->em->persist($contract);
            $this->em->persist($specification);
            $this->em->flush();
        }
        return $specification->getContracts();

    }

    public function getContractConstruction(Specification $specification)
    {

        $criteria = new Criteria();
        $expr = new Comparison('type', '=', 'construction');
        $criteria->where($expr);
        return $specification->getContracts()->matching($criteria)->first();
    }
   public function getSpecificationContract(Specification $specification, $options=[])
    {
        return  $this->contractsRepository->listContractsSpec($specification,$options);
    }

    public function removeSpecificationContract(Specification $specification)
    {

        if ($specification->getFixed() === true) {
            abort(400,'Фиксированная спецификация');
        }

        $contract = $this->getContractConstruction($specification);

        if (!$contract) {
            abort(404,"Не найден назначенный договор подряда");
        }

        $contract->setSpecification(null);
        //$specification->removeContract($contract);
        $this->em->persist($contract);
        $this->em->persist($specification);
        $this->em->flush();
        $this->em->clear();

        return $this->findMyCompnay($specification);
    }
}
