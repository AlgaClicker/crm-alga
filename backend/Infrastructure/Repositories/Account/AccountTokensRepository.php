<?php

namespace Infrastructure\Repositories\Account;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\EntityRepository;
use Domain\Entities\Subscriber\AccountTokens;
use Domain\Contracts\Repository\AccountTokensRepositoryContract;
use Doctrine\DBAL\Exception;
use function Doctrine\ORM\QueryBuilder;

/**
 * CommentsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AccountTokensRepository  extends EntityRepository implements AccountTokensRepositoryContract
{
    protected EntityManagerInterface $em;
    protected string $entityNamespace;
    public function __construct(EntityManagerInterface $em, AccountTokens $accountTokens)
    {
        //$this->entityNamespace = get_class(AccountTokens::class);
        $this->_class = $accountTokens;
        $this->_entityName = get_class($accountTokens);
        $this->em = $em;

    }

    public function cleanOldTokens() {
        echo "Start cleanOldTokens\r\n";
        $qb = $this->em->createQueryBuilder();

        $qb->select('at.id, at.createdAt, at.expiresIn')
            ->from($this->_entityName,'at');
        $query = $this->em->createQuery($qb->getDQL());

        try {
            $allTokenRecords  =$query->getResult();
        } catch (Exception $e ) {
            dd("Error",$e->getMessage());
        }

        foreach ($allTokenRecords as $tokenRecord) {
            $startTime =  \DateTimeImmutable::createFromMutable($tokenRecord['createdAt']);
            $endTime = $startTime->modify('+ '.$tokenRecord['expiresIn'].' min');
            $currentTime = new \DateTimeImmutable('now');

            if ($currentTime>$endTime) {
                $token = $this->em->getRepository($this->_entityName)->find($tokenRecord['id']);
                $this->em->remove($token);

            }
        }
        $this->em->flush();
        echo "Finish \r\n";
    }

    public function listTokenAccount($idAccount): array
    {
        return [''];
    }

    public function updateToken($token) {}

    public function tokenTimeout($token) {}

    public function expiredTokens(): array
    {
        return [''];
    }

    private function serialize($entity)
    {
        return help()->jms->toJson($entity);
    }

    public function findByAccount($idAccount)
    {
        return $this->getRepository($this->_entityName)->findBy(['id'=>1]);
    }
}
