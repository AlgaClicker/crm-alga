apiVersion: v1
kind: Service
metadata:
  name: rabbitmq-stage
  labels:
    app: rabbitmq-stage
  namespace: stage
spec:
  type: NodePort
  ports:
  - port: 5672
  selector:
    app: rabbitmq
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: rabbitmq-stage
  namespace: stage
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: rabbitmq-stage
    spec:
      containers:
      - name: rabbitmq
        image: rabbitmq:3.7
        imagePullPolicy: "IfNotPresent"
        ports:
        - containerPort: 5672
        envFrom:
        - configMapRef:
            name: rabbitmq-config
        volumeMounts:
        - name: rabbitmq-data
          mountPath: /var/lib/rabbitmq/mnesia
      volumes:
      - name: rabbitmq-data
        persistentVolumeClaim:
          claimName: rabbitmq-stage-pv-claim
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: rabbitmq-config
  labels:
    app: rabbitmq-prod
  namespace: stage
data:
  RABBITMQ_ERLANG_COOKIE: "POASJLKNEFNDSKLASSPZ"
  RABBITMQ_DEFAULT_USER: "rabbitmq"
  RABBITMQ_DEFAULT_PASS: "rabbitmq"
  RABBITMQ_DEFAULT_VHOST: "/"
---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: rabbitmq-stage-pv-volume
  labels:
    type: local
    app: rabbitmq-stage
  namespace: stage
spec:
  storageClassName: manual
  capacity:
    storage: 5Gi
  accessModes:
  - ReadWriteMany
  hostPath:
    path: "/mnt/stage/rabbitmq/data"
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: rabbitmq-stage-pv-claim
  labels:
    app: rabbitmq-stage
  namespace: stage
spec:
  storageClassName: manual
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
